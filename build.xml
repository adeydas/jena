<project name="SDB" default="main" basedir=".">

    <property name="Name"            value="SDB"/>
    <property name="name"            value="sdb"/>
    
    <!-- The major and minor version numbers  -->
    <property name="version-major"   value="1"/>
    <property name="version-minor"   value="2"/>
    <property name="version-status"  value="-dev"/>
    <property name="version"
              value="${version-major}.${version-minor}${version-status}"/>

    <property name="dist.name"       value="${Name}-${version}"/>
    <property name="zipfile"         value="${name}-${version}.zip"/>

    <property name="src.dir"         value="src"/>
    <property name="src-test.dir"    value="src-test"/>
    <property name="src-ex.dir"      value="src-examples"/>

    <property name="src.build.dir"     location="bldsrc"/>
    <property name="classes.build.dir" location="bldbin"/>
    <property name="dist.root"       location="dist"/>
    <property name="dist.dir"        location="${dist.root}/${dist.name}"/>
    <property name="lib.dir"         value="lib"/>
    <property name="doc.dir"         value="doc"/>
    <property name="javadoc.dir"     value="doc/javadoc"/>

    <property name="test.dir"        value="testing"/>
    <property name="vocab.dir"       value="Vocabularies"/>
    <property name="jarfile"         value="${name}.jar"/>

    <path id="classpath">
        <fileset dir="${lib.dir}" includes="*.jar" excludes="${jarfile}"/>
    </path>

    <filterset id="filters.general">
        <filter token="name"           value="${Name}"/>
        <filter token="website"        value="http://jena.sourceforge.net/"/>
        <filter token="version"        value="${version}"/>
        <filter token="version-major"  value="${version-major}"/>
        <filter token="version-minor"  value="${version-minor}"/>
        <filter token="version-status" value="${version-status}"/>   
    </filterset>   

    <!-- Set the javac flags that will produce an optimised jar
         with no debug symbols -->
    <target name="optimise-javac-flags">
        <property name="java.debug"       value="false"/>
        <property name="java.debuglevel"  value=""/>
        <property name="java.deprecation" value="true"/>
        <property name="java.optimize"    value="true"/>
        <property name="java.source"      value="1.5"/>
        <property name="java.target"      value="1.5"/>
    </target>

    <!-- Set the javac flags that will produce an debug jar with 
         compiler optimisation and all debug symbols-->

    <target name="default-javac-flags">
        <!-- Note that in ant, if these flags are already 
             set setting them again has no effect -->
        <property name="java.debug"       value="true"/>
        <property name="java.debuglevel"  value="source,lines,vars"/>
        <property name="java.deprecation" value="true"/>
        <property name="java.optimize"    value="true"/>
        <property name="java.source"      value="1.5"/>
        <property name="java.target"      value="1.5"/>
    </target>

    <target name="javac-flags" depends="default-javac-flags"/>

    <!-- Section: Compilation and jar -->

    <target name="init">
        <tstamp/>
    </target>

    <!-- Main external targets -->
    <target name="main" depends="jar" description="Build sdb.jar"/>
    
    <!-- Alternative name -->
    <target name="jar"  depends="make-jars" description="Build sdb.jar"/>

    <target name="release" depends="clean,init,package"
            description="Create SDB release">
        <antcall target="clean-build-dirs"/>
    </target>

    <!-- ==== Compile ==== -->

    <target name="pre-compile" depends="javac-flags"/>

    <target name="build-src" depends="clean-build-src-dir">
        <tstamp>
            <format property="BUILD_TIME"      pattern="yyyy-MM-dd HH:mm Z"/>
            <format property="BUILD_TIME_XSD"  pattern="yyyy-MM-dd'T'HH:mm:ssZ"/>
        </tstamp>
        
        <copy todir="${src.build.dir}">
            <fileset dir="${src.dir}" includes="**"/>
            <fileset dir="${src-test.dir}" includes="**"/>
            <fileset dir="${src-ex.dir}"  includes="**"/>

            <filterset>
                <filterset refid="filters.general"/>
                <filter token="build-time" value="${BUILD_TIME}" />
                <filter token="build-time-xsd" value="${BUILD_TIME_XSD}" />
            </filterset> 
        </copy>
    </target>

    <target name="compile" 
            depends="pre-compile,build-src,compile-java"
            description="Compile"/>

    <target name="compile-java" depends="pre-compile">
        <javac srcdir="${src.build.dir}"
               destdir="${classes.build.dir}"
               debug="${java.debug}"
               debuglevel="${java.debuglevel}"
               deprecation="${java.deprecation}"
               optimize="${java.optimize}"
               source="${java.source}"
               target="${java.target}"
               >
            <classpath refid="classpath" />
        </javac>
    </target>
    
    <!-- Other things to go into the jar file -->
    <target name="classes-misc">
        <copy todir="${classes.build.dir}" file="log4j.properties"/>
    </target>

    <!-- ==== Jar ==== -->

    <target name="make-jars" depends="compile,classes-misc">
        <jar destfile="${lib.dir}/${jarfile}"
             index="yes">
            <fileset dir="${classes.build.dir}"/>
        </jar>
    </target>

    <!-- ==== Testing ==== -->

    <target name="test-query" depends="jar">
        <junit printsummary="yes">
            <formatter type="plain"/>
            <classpath>
                <fileset dir="${lib.dir}" includes="*.jar"/>
                <fileset dir="jdbc" includes="*.jar"/>
            </classpath>
            <test name="com.hp.hpl.jena.sdb.test.SDBQueryTestSuite"/>
        </junit>
    </target>

    <target name="test-hsqldb" depends="jar">
        <junit printsummary="on">
            <formatter type="plain"/>
            <classpath>
                <fileset dir="${lib.dir}" includes="*.jar"/>
                <fileset dir="jdbc" includes="*.jar"/>
            </classpath>
            <test name="com.hp.hpl.jena.sdb.test.graph.TestHSQLGraph"/>
            <test name="com.hp.hpl.jena.sdb.test.model.TestHSQLModel"/>
            <test name="com.hp.hpl.jena.sdb.test.update.TestStoreUpdateHSQLHash"/>
            <test name="com.hp.hpl.jena.sdb.test.update.TestStoreUpdateHSQLIndex"/>
        </junit>
    </target>
    
    <target name="test-derby" depends="jar">
        <junit printsummary="on"  fork="on">    <!-- Fork necessary for Derby -->
            <formatter type="plain"/>
            <classpath>
                <fileset dir="${lib.dir}" includes="*.jar"/>
                <fileset dir="jdbc" includes="*.jar"/>
            </classpath>
            <test name="com.hp.hpl.jena.sdb.test.graph.TestDerbyGraph"/>
            <test name="com.hp.hpl.jena.sdb.test.model.TestDerbyModel"/>
            <test name="com.hp.hpl.jena.sdb.test.update.TestStoreUpdateDerbyHash"/>
            <test name="com.hp.hpl.jena.sdb.test.update.TestStoreUpdateDerbyIndex"/>
        </junit>
    </target>
    
    <target name="test-pgsql" depends="jar">
        <junit printsummary="on" fork="on">     <!-- TEMP - may be issue with test suite -->
            <formatter type="plain"/>
            <classpath>
                <fileset dir="${lib.dir}" includes="*.jar"/>
                <fileset dir="jdbc" includes="*.jar"/>
            </classpath>
            <test name="com.hp.hpl.jena.sdb.test.graph.TestPgSQLGraph"/>
            <test name="com.hp.hpl.jena.sdb.test.model.TestPgSQLModel"/>
            <test name="com.hp.hpl.jena.sdb.test.update.TestStoreUpdatePgSQLHash"/>
            <test name="com.hp.hpl.jena.sdb.test.update.TestStoreUpdatePgSQLIndex"/>
        </junit>
    </target>

    <target name="test-mysql" depends="jar">
        <junit printsummary="on">
            <formatter type="plain"/>
            <classpath>
                <fileset dir="${lib.dir}" includes="*.jar"/>
                <fileset dir="jdbc" includes="*.jar"/>
            </classpath>
            <test name="com.hp.hpl.jena.sdb.test.graph.TestMySQLGraph"/>
            <test name="com.hp.hpl.jena.sdb.test.model.TestMySQLModel"/>
            <test name="com.hp.hpl.jena.sdb.test.update.TestStoreUpdateMySQLHash"/>
            <test name="com.hp.hpl.jena.sdb.test.update.TestStoreUpdateMySQLIndex"/>
        </junit>
    </target>
    
    <target name="test-sqlserver" depends="jar">
        <junit printsummary="on" fork="on">
            <formatter type="plain"/>
            <classpath>
                <fileset dir="${lib.dir}" includes="*.jar"/>
                <fileset dir="jdbc" includes="*.jar"/>
            </classpath>
            <test name="com.hp.hpl.jena.sdb.test.graph.TestSQLServerGraph"/>
            <test name="com.hp.hpl.jena.sdb.test.model.TestSQLServerModel"/>
            <test name="com.hp.hpl.jena.sdb.test.update.TestStoreUpdateSQLServerHash"/>
            <test name="com.hp.hpl.jena.sdb.test.update.TestStoreUpdateSQLServerIndex"/>
        </junit>
    </target>
    
    <target name="test-oracle" depends="jar">
        <junit printsummary="on">
            <formatter type="plain"/>
            <classpath>
                <fileset dir="${lib.dir}" includes="*.jar"/>
                <fileset dir="jdbc" includes="*.jar"/>
            </classpath>
            <test name="com.hp.hpl.jena.sdb.test.graph.TestOracleGraph"/>
            <test name="com.hp.hpl.jena.sdb.test.model.TestOracleModel"/>
            <test name="com.hp.hpl.jena.sdb.test.update.TestStoreUpdateOracleHash"/>
            <test name="com.hp.hpl.jena.sdb.test.update.TestStoreUpdateOracleIndex"/>
        </junit>
    </target>
    
    <target name="test-db2" depends="jar">
        <junit printsummary="on">
            <formatter type="plain"/>
            <classpath>
                <fileset dir="${lib.dir}" includes="*.jar"/>
                <fileset dir="jdbc" includes="*.jar"/>
            </classpath>
            <test name="com.hp.hpl.jena.sdb.test.graph.TestDB2Graph"/>
            <test name="com.hp.hpl.jena.sdb.test.model.TestDB2Model"/>
            <test name="com.hp.hpl.jena.sdb.test.update.TestStoreUpdateDB2Hash"/>
            <test name="com.hp.hpl.jena.sdb.test.update.TestStoreUpdateDB2Index"/>
        </junit>
    </target>

    <!-- ==== Javadoc ==== -->
    <!-- How to get ant/javadoc to tunnel through the firewall -->
    <!-- <link href="http://java.sun.com/j2se/1.5.0/docs/api/"/> -->

    <target name="javadoc" depends="clean-javadoc,build-src,javac-flags"
            description="Make the javadoc">

        <javadoc sourcepath="${src.build.dir}"
                 packagenames="com.hp.hpl.jena.sdb"
                 source="${java.source}"
                 destdir="${javadoc.dir}"
                 author="true"
                 version="true"
                 classpathref="classpath"
                 windowtitle="${Name} Query Processor"
                 doctitle="${Name} Query Processor"
                 Public="true"
                 Use="true"
                 bottom="Copyright &#169; 2006, 2007, 2008 Hewlett-Packard Development Company, LP"
                 additionalparam="-breakiterator">
            <classpath refid="classpath"/>
            <package name="com.hp.hpl.jena.query.sdb"/>
        </javadoc>
    </target>

    <!-- ==== Create distribution ==== -->

    <target name="package"
            depends="make-jars,javadoc,distribution-init,copy,zip"/>

    <target name="distribution-init">
        <mkdir dir="${dist.dir}"/>
    </target>

    <target name="copy" depends="distribution-init">
        <delete dir="${dist.dir}"/>
        <mkdir dir="${dist.dir}"/>

        <copy todir="${dist.dir}/${lib.dir}">
            <fileset dir="${lib.dir}" includes="**/*.jar"/>
        </copy>

        <copy todir="${dist.dir}/${test.dir}">
            <fileset dir="${test.dir}"/>
        </copy>

        <!-- bin/ and bat/ -->
        <copy todir="${dist.dir}/bin">
            <fileset dir="bin"/>
        </copy>
        <copy todir="${dist.dir}/bin2">
            <fileset dir="bin2"/>
        </copy>

        <copy todir="${dist.dir}/" file="build.xml"/>
        <copy todir="${dist.dir}/" file="copyright.txt"/>
        <copy todir="${dist.dir}/" file="README.txt"/>
        <copy todir="${dist.dir}/" file="ChangeLog.txt"/>
        <copy todir="${dist.dir}/" file="test.sh"/>
        <copy tofile="${dist.dir}/sdb.ttl" file="Store/sdb-blank.ttl"/>

        <copy todir="${dist.dir}/${src.dir}">
            <fileset dir="${src.build.dir}" includes="**" excludes="dev/**"/>
        </copy>

        <copy todir="${dist.dir}/Store">
            <fileset dir="Store" includes="**"/>
        </copy>
        
        <!-- Documentation is on the wiuki, mainly.-->
        <copy todir="${dist.dir}/${doc.dir}">
            <fileset dir="${doc.dir}">
                <include name="**"/>
                <!-- FrontPage internal directories -->
                <exclude name="**/_vti*/**"/>
                <exclude name="**/_private/**"/>
                <exclude name="**/desktop.ini"/>
            </fileset>
        </copy>

    </target>
    
    <target name="zip" >
        <!-- Build the zip of everything -->
        <delete file="${dist.root}/${zipfile}"/>
        <zip zipfile="${dist.root}/${zipfile}">
            <fileset dir="dist" includes="${dist.name}/**"/>
        </zip>
    </target>

    <!-- ==== Cleaning ==== -->

    <target name="clean" depends="clean-build-dirs"
            description="Clean up">
        <delete dir="${dist.dir}"/>
    </target>

    <target name="clean-all" depends="clean-javadoc,clean"
            description="Clean up a lot">
        <delete dir="${dist.dir}"/>
    </target>

    <target name="clean-build-dirs"
            depends="clean-build-classes-dir,clean-build-src-dir"/>
    <target name="clean-build-classes-dir">

        <delete dir="${classes.build.dir}"/>
        <mkdir dir="${classes.build.dir}"/>
    </target>

    <target name="clean-build-src-dir">
        <delete dir="${src.build.dir}"/>
        <mkdir  dir="${src.build.dir}"/>
    </target>

    <target name="clean-javadoc" description="Clean the javadoc directories">
        <delete dir="${javadoc.dir}"/>
        <mkdir  dir="${javadoc.dir}"/>
    </target>

</project>
