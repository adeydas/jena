<project xmlns:ivy="antlib:org.apache.ivy.ant" name="TDB" default="main">

  <!-- ========================================== -->
  <!-- ==== Configuration  -->

  <property name="Name"                   value="TDB"/>
  <property name="name"                   value="tdb"/>

  <property environment="env"/>

  <!-- The major and minor version numbers  -->
  <property name="version-major"   value="0"/>
  <property name="version-minor"   value="5"/>
  <property name="version-status"  value=""/>
  <property name="version"
            value="${version-major}.${version-minor}${version-status}"/>
  
  <target name="main" depends="jar"/>
  
  <!-- IMPORT : except -p shows the lib.TARGET and TARGET each time.-->

  <!-- TODO
       Make ivy-resolve work with the compilation process.
       Possibly download twice - with and without versions (is there 
       <ivy:retrieve conf="dev" pattern="lib2/[artifact]-[revision].[ext]" />

       <ivy:retrieve conf="dev" pattern="lib/arq.[ext]" />
       <ivy:retrieve conf="dev" pattern="lib/arq-extra.[ext]" />
        etc
       <ivy:cachepath>
       or work with version numbered.
       Enable srource and javadoc artifacts
  -->

  <!-- Library of standard tasks

       == Tasks
       clean      clean up
       compile    compile sources
       jar        make jar 
       publish    export to maven
       release    
       Must provide
       junit      Run the test suite
       report     Run the test suite and generate a report

       == Assumes
       Properties:
       Name       The project name, capitalized, used for 
       release directory and release zip.
       name       The project name,lowercase, used as artifact root
       version    The version string
       path id="path.java.source"
       fileset dir="." id="fileset.src"
       So maybe change to one src-directory after all
       TS_* for test suites
  -->

  <property name="dist.name"              value="${Name}-${version}"/>
  <property name="release.zipfile"        value="${name}-${version}.zip"/>

  <!-- Distribution area -->
  <property name="dist.root"              value="dist"/>
  <property name="dist.dir"               value="${dist.root}/${dist.name}"/>

  <!-- Artifacts -->
  <!-- Align name with ivy.xml publications section -->
  <property name="jarfile"                value="${name}-${version}.jar"/>
  <property name="src.zipfile"            value="${name}-src-${version}.zip"/>               <!-- Not Maven name ?-->
  <property name="javadoc.zipfile"        value="${name}-javadoc-${version}.zip"/>          <!-- Not Maven name ?-->
  <property name="pomfile"                value="${name}-${version}.pom"/>

  <!-- Places -->
  <property name="src.dir"                value="src"/>
  <property name="src.test.dir"           value="src-test"/>
  <property name="src.lib.dir"            value="src-lib"/>
  <property name="src.lib.test.dir"       value="src-lib-test"/>
  <property name="src.examples.dir"       value="src-examples"/>
  <property name="src.dev.dir"            value="src-dev"/>
  
  <property name="doc.dir"                value="doc"/>
  <property name="javadoc.dir"            value="${doc.dir}/javadoc"/>
  <property name="javadoc.all.dir"        value="${doc.dir}/javadoc-all"/>
  <property name="javadoc.title"          value="${Name}"/>
  <property name="lib.dir"                value="lib"/>
  <!-- Testing - scripts and data files -->
  <property name="test.dir"               value="testing"/>

  <!-- Meaning-less -->
  <!-- <property name="main.class"            value="package.something"/> -->

  <!-- Build area - locally publising in ivy is to build/pub --> 
  <property name="build.dir"              value="build"/>
  <property name="build.classes.dir"      value="${build.dir}/classes"/>
  <property name="artifacts.dir"          value="${build.dir}/artifacts"/>

  <!-- Testing -->
  <property name="reports.dir"            value="reports"/>
  <property name="reports.dir.xml"        value="reports/xml"/>
  <property name="reports.outdir"         value="reports"/>
  <property name="test.dir"               value="tmp/testing"/>

  <!-- ========================================== -->
  <!-- ==== Setup  -->

  <!-- This must be after IVY has done it's dependence stuff --> 
  
  <path id="java.build.class.path">
    <fileset dir="${lib.dir}" includes="*.jar" excludes="${jarfile}"/>
  </path>

  <path id="java.run.class.path">
    <!-- jar file may, or may not, be in the lib directory -->
    <fileset dir="${lib.dir}" includes="*.jar" excludes="${jarfile}"/>
    <fileset dir="${build.dir}" includes="tdb*.jar"/>
  </path>

  <!-- Sources as a path -->
  
  <path id="java.source.path.test">
    <pathelement path="${src.test.dir}"/>
    <pathelement path="${src.lib.test.dir}"/>
  </path>    

  <path id="java.source.path.main">
    <pathelement path="${src.dir}"/>
    <pathelement path="${src.lib.dir}"/>
  </path>    
  
  <path id="java.source.path">
    <path refid="java.source.path.main"/>
    <path refid="java.source.path.test"/>
  </path>

  <!-- Sources as fileset (how do I avoid the duplication here?) Only used in zip -->
  <fileset dir="." id="fileset.src">
    <include name="${src.dir}/**/*.java"/>
    <include name="${src.test.dir}**/*.java"/>
    <include name="${src.lib.dir}**/*.java"/>
    <include name="${src.lib.test.dir}**/*.java"/>
  </fileset>
  
  <target name="javac-flags">
    <!-- Note that in ant, if these flags are already set 
         setting them again has no effect -->
    <property name="java.debug"       value="true"/>
    <property name="java.debuglevel"  value="source,lines,vars"/>
    <property name="java.deprecation" value="true"/>
    <property name="java.optimize"    value="true"/>
    <property name="java.encoding"    value="UTF8"/>
    <property name="java.source"      value="1.6"/>
    <property name="java.target"      value="1.6"/>
  </target>

  <!-- ========================================== -->
  <!-- ==== Sources -->
  
  <!-- ========================================== -->
  <!-- ==== Build and compile -->

  <target name="compile" depends="javac-flags" description="Compile project">
    <mkdir dir="${build.classes.dir}"/>
    <javac destdir="${build.classes.dir}"
           debug="${java.debug}"
           deprecation="${java.debuglevel}"
           optimize="${java.optimize}"
           encoding="${java.encoding}"
           source="${java.source}"
           target="${java.target}"
           >
      <src refid="java.source.path"/>
      <classpath refid="java.build.class.path" />
    </javac>
  </target>

  <target name="jars" depends="jar" />
  <target name="jar" depends="compile" description="Build the jar">
    <delete file="${build.dir}/${jarfile}"/>
    <jar destfile="${build.dir}/${jarfile}" basedir="${build.classes.dir}">
      <!--
        <manifest>
        <attribute name="Main-Class" value="${main.class}"/>
        </manifest>
      -->
    </jar>
  </target>
  
  <!-- ========================================== -->
  <!-- ==== Javadoc -->
  <!-- To build? -->

  <target name="javadoc" depends="javac-flags"
          description="Make the javadoc">
    <delete  dir="${javadoc.dir}"/>
    <mkdir  dir="${javadoc.dir}"/>
    <javadoc destdir="${javadoc.dir}"
             author="true"
             sourcepathref="java.source.path.main"
             source="${java.source}"
             version="true"
             windowtitle="${Name}-${version} Javadoc"
             doctitle="${javadoc.title}"
             Public="true"
             Use="true"
             bottom="Copyright &#169; 2007, 2008 Hewlett-Packard Development Company, LP"
             additionalparam="-breakiterator">
      <classpath refid="java.build.class.path"/>
      <package name="com.hp.hpl.jena.tdb"/>
    </javadoc>
  </target>

  <target name="javadoc-all" depends="javac-flags"
          description="Make the javadoc">
    <delete dir="${javadoc.all.dir}"/>
    <mkdir  dir="${javadoc.all.dir}"/>
    <javadoc destdir="${javadoc.all.dir}"
             author="true"
             sourcepathref="java.source.path.main"
             source="${java.source}"
             version="true"
             windowtitle="${Name}-${version} Javadoc"
             doctitle="${javadoc.title}"
             Public="true"
             Use="true"
             bottom="Copyright &#169; 2007, 2008 Hewlett-Packard Development Company, LP"
             additionalparam="-breakiterator">
      <classpath refid="java.build.class.path"/>
      <package name="com.hp.hpl.jena.tdb.*"/>
    </javadoc>
  </target>
  
  <!-- ========================================== -->
  <!-- ==== Artifacts -->       
  
  <target name="artifacts-init">
    <delete dir="${artifacts.dir}"/>
    <mkdir dir="${artifacts.dir}"/>
  </target>

  <target name="jar-artifact" depends="jar">
    <!-- <delete file="${artifacts.dir}/${jarfile}"/> -->
    <copy todir="${artifacts.dir}" file="${build.dir}/${jarfile}"/>
  </target>
  
  <target name="pom-artifact">
    <!-- <delete file="${artifacts.dir}/${pomfile}"/> -->
    <copy file="tdb.pom" tofile="${artifacts.dir}/${pomfile}">
      <filterset>
        <filter token="VERSION" value="${version}"/>
      </filterset>
    </copy>
  </target>
  
  <target name="src-artifact" depends="">
    <!-- <delete file="${artifacts.dir}/${src.zipfile}"/> -->
    <zip zipfile="${artifacts.dir}/${src.zipfile}">
        <fileset refid="fileset.src"/>
    </zip>
    <!-- OLD   <copy todir="${artifacts.dir}" file="${build.dir}/${src.zipfile}"/> -->
  </target>

  <target name="javadoc-artifact" depends="javadoc">
    <!-- <delete file="${artifacts.dir}/${src.zipfile}"/> -->
    <zip zipfile="${artifacts.dir}/${javadoc.zipfile}" 
         basedir="${javadoc.dir}"/>
  </target>
  
  <!-- ========================================== -->
  <!-- ==== Publication -->

  <!-- jar-artifact,pom-artifact,src-artifact,javadoc-artifact -->
  <target name="artifacts" depends="clean,jar,jar-artifact,pom-artifact"/>
  
  <target name="publish" description="Build and publish this version"
          depends="clean,ivy-resolve,artifacts,ivy-publish">
  </target>
  
  <!-- ========================================== -->
  <!-- ==== JUnit and reporting -->

  <target name="junit" depends="run-junit" description="Run the test suite">
    <fail message="JUnit tests failed" if="junit.failed"/>
  </target>

  <target name="report" depends="run-report" description="Run tests and generate reports">
    <fail message="JUnit tests failed" if="junit.failed"/>
  </target>

  <!-- Worker task for the above tasks -->

  <target name="run-junit" depends="clean-reports">
    <mkdir dir="${reports.dir}"/>
    <mkdir dir="${reports.dir.xml}"/>
    <mkdir dir="${test.dir}"/>

    <!-- Don't stop on failure - set a property instead -->
    <junit printsummary="yes" errorProperty="junit.failed" failureProperty="junit.failed">
      <!-- usefile="false"  type="plain"-->
      <!-- <formatter usefile="false" type="brief"/> -->
      <formatter type="xml" />
      <classpath>
        <pathelement path="${build.classes.dir}" />
        <path refid="java.run.class.path" />
      </classpath>
      <!-- <test name="test.TS_Main" outfile="${reports.dir.xml}/junit-report"/> -->
      <batchtest todir="${reports.dir.xml}">
        <fileset dir="${src.test.dir}">
          <include name="**/TS_*.java" />
        </fileset>
        <fileset dir="${src.lib.test.dir}">
          <include name="**/TS_*.java" />
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="run-report" depends="run-junit">
    <junitreport todir="./${reports.dir}">
      <fileset dir="./${reports.dir.xml}">
        <include name="**.xml"/>
      </fileset>
      <report format="frames" todir="./${reports.outdir}"/>
    </junitreport>
  </target>

  <target name="clean-reports">
    <delete dir="${reports.dir}"/>
    <delete dir="${reports.dir.xml}"/>
    <delete dir="${reports.outdir}"/>
  </target>
  
  <!-- ========================================== -->
  <!-- ==== Release -->

  <target name="release" depends="clean,artifacts,package"
          description="Create TDB release">
  </target>

  <target name="package" depends="copy-init,copy-dist,zip-release"/>

  <target name="copy-init">
    <delete dir="${dist.dir}" />
    <mkdir dir="${dist.dir}" />
    <mkdir dir="${dist.dir}/${lib.dir}"/>
  </target>

  <target name="copy-dist" depends="copy-init,jar,javadoc">
    <!-- jars - tdb jar and dependences -->
    <copy todir="${dist.dir}/${lib.dir}">
      <fileset dir="${lib.dir}" includes="**/*.jar" excludes="${jarfile}"/>
      <fileset dir="${build.dir}" includes="*.jar"/>
    </copy>

    <!-- Source code -->
    <!-- Not an artifact yet -->
    <!-- <copy todir="${dist.dir}" file="${artifacts.dir}/${src.zipfile}"/> -->
    <zip zipfile="${dist.dir}/${src.zipfile}">
        <fileset refid="fileset.src"/>
    </zip>


    <copy todir="${dist.dir}/${test.dir}">
      <fileset dir="${test.dir}"/>
    </copy>

    <!-- bin/ (and bat/ if any) -->
    <copy todir="${dist.dir}/bin">
      <fileset dir="bin"/>
    </copy>
    <copy todir="${dist.dir}/bin2">
      <fileset dir="bin2"/>
    </copy>

    <copy todir="${dist.dir}/" file="build.xml"/>
    <copy todir="${dist.dir}/">
      <fileset dir="." includes="ivy*"/>
    </copy>
  	
    <copy todir="${dist.dir}/" file="copyright.txt"/>
    <copy todir="${dist.dir}/" file="README.txt"/>
    <copy todir="${dist.dir}/" file="ChangeLog.txt"/>
  	<copy todir="${dist.dir}/" file="tdb.ttl"/>

    <!-- Documentation (not the wiki) -->
    <copy todir="${dist.dir}/${doc.dir}">
      <fileset dir="${doc.dir}">
        <include name="**" />
        <exclude name="**/_vti*/**" />
        <exclude name="**/_private/**" />
        <exclude name="**/javadoc-all/**"/>
        <exclude name="**/desktop.ini" />
      </fileset>
    </copy>
  </target>

  <target name="zip-release">
    <!-- Build the zip of the distribution -->
    <delete file="${dist.root}/${release.zipfile}"/>
    <zip zipfile="${dist.root}/${release.zipfile}">
      <fileset dir="dist" includes="${dist.name}/**"/>
    </zip>
  </target>

  <target name="clean-dist">
    <delete dir="${dist.root}"/>
  </target>
  
  <!-- ========================================== -->
  <!-- ==== Ivy : Dependency Management  -->

  <target name="ivy-init">
    <ivy:settings />
  </target>

  <!-- Convenience target -->
  <target name="ivy" depends="ivy-setup-lib" description="Set up for use with Eclispe">
  </target>
  
  <target name="ivy-setup-lib" depends="ivy-init,ivy-resolve-report" 
          description="Resolve and fetch dependences with Ivy">
    <ivy:retrieve conf="dev" pattern="lib2/[artifact]-[revision].[ext]" />
    <ivy:cachepath pathid="ivy.dev.classpath" conf="dev" />
  </target>

  <target name="ivy-resolve" depends="ivy-resolve-report"/>

  <target name="ivy-resolve-report" depends="ivy-init">
    <ivy:resolve conf="dev"
                 haltonfailure="false" failureproperty="ivy.resolve.failed"/>
    <ivy:report todir="${reports.dir}"/>
    <fail message="Ivy dependency failed" if="ivy.resolve.failed"/>
  </target>

  <target name="ivy-publish" depends="ivy-init">
    <ivy:resolve conf="main"/>
    <ivy:publish conf="main" 
                 resolver="dev-publish" 
                 overwrite="true"
                 forcedeliver="true">
      <artifacts pattern="${artifacts.dir}/[artifact]-[revision].[ext]" />
    </ivy:publish>
  </target>

  <target name="ivy-pom" depends="ivy-init">
    <!-- Make a basic POM file -->
    <ivy:makepom ivyfile="ivy.xml" 
                 pomfile="pom-tdb-auto.xml">
      <!--
        <mapping conf="default" scope="compile"/>
        <mapping conf="runtime" scope="runtime"/>
      -->
    </ivy:makepom>
  </target>
  
  
  <!-- ========================================== -->
  <!-- ==== Run -->

  <target name="run" depends="compile">
    <java classname="${main-class}" fork="true">
      <!-- jar="${build.jar.dir}/${jarfile}"-->
      <arg value="--check"/>
      <arg value="10"/>
      <arg value="100"/>
      <classpath>
        <pathelement path="${build.classes.dir}"/>
        <path refid="java.run.class.path"/>
      </classpath>
    </java>
  </target>

  
  <!-- ========================================== -->
  <!-- ==== Misc -->

  <target name="clean" description="Clean (build and reports)"
          depends="clean-build-area,clean-reports">
  </target>

  <target name="clean-javadoc">
    <delete dir="${javadoc.dir}"/>
    <mkdir  dir="${javadoc.dir}"/>
    <delete dir="${javadoc.all.dir}"/>
    <mkdir  dir="${javadoc.all.dir}"/>
  </target>
  
  <target name="clean-build-area">
    <delete dir="${build.dir}"/>
    <mkdir  dir="${build.dir}"/>
  </target>

</project>
