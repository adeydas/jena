/* Generated By:JavaCC: Do not edit this line. ARQParserConstants.java */
/*
 * (c) Copyright 2004, 2005, 2006, 2007 Hewlett-Packard Development Company, LP
 * All rights reserved.
 */

package com.hp.hpl.jena.sparql.lang.arq ;

public interface ARQParserConstants {

  int EOF = 0;
  int WS = 8;
  int SINGLE_LINE_COMMENT = 9;
  int IRIref = 10;
  int PNAME_NS = 11;
  int PNAME_LN = 12;
  int BLANK_NODE_LABEL = 13;
  int VAR1 = 14;
  int VAR2 = 15;
  int LANGTAG = 16;
  int A2Z = 17;
  int A2ZN = 18;
  int KW_A = 19;
  int BASE = 20;
  int PREFIX = 21;
  int SELECT = 22;
  int DISTINCT = 23;
  int REDUCED = 24;
  int DESCRIBE = 25;
  int CONSTRUCT = 26;
  int ASK = 27;
  int LIMIT = 28;
  int OFFSET = 29;
  int ORDER = 30;
  int BY = 31;
  int ASC = 32;
  int DESC = 33;
  int NAMED = 34;
  int FROM = 35;
  int WHERE = 36;
  int AND = 37;
  int GRAPH = 38;
  int OPTIONAL = 39;
  int UNION = 40;
  int AS = 41;
  int EXT = 42;
  int GROUP = 43;
  int HAVING = 44;
  int AGG = 45;
  int COUNT = 46;
  int MIN = 47;
  int MAX = 48;
  int SUM = 49;
  int AVG = 50;
  int STDDEV = 51;
  int FILTER = 52;
  int BOUND = 53;
  int STR = 54;
  int DTYPE = 55;
  int LANG = 56;
  int LANGMATCHES = 57;
  int IS_URI = 58;
  int IS_IRI = 59;
  int IS_BLANK = 60;
  int IS_LITERAL = 61;
  int REGEX = 62;
  int SAME_TERM = 63;
  int TRUE = 64;
  int FALSE = 65;
  int DIGITS = 66;
  int INTEGER = 67;
  int DECIMAL = 68;
  int DOUBLE = 69;
  int INTEGER_POSITIVE = 70;
  int DECIMAL_POSITIVE = 71;
  int DOUBLE_POSITIVE = 72;
  int INTEGER_NEGATIVE = 73;
  int DECIMAL_NEGATIVE = 74;
  int DOUBLE_NEGATIVE = 75;
  int EXPONENT = 76;
  int QUOTE_3D = 77;
  int QUOTE_3S = 78;
  int ECHAR = 79;
  int STRING_LITERAL1 = 80;
  int STRING_LITERAL2 = 81;
  int STRING_LITERAL_LONG1 = 82;
  int STRING_LITERAL_LONG2 = 83;
  int LPAREN = 84;
  int RPAREN = 85;
  int NIL = 86;
  int LBRACE = 87;
  int RBRACE = 88;
  int LBRACKET = 89;
  int RBRACKET = 90;
  int ANON = 91;
  int SEMICOLON = 92;
  int COMMA = 93;
  int DOT = 94;
  int EQ = 95;
  int NE = 96;
  int GT = 97;
  int LT = 98;
  int LE = 99;
  int GE = 100;
  int BANG = 101;
  int TILDE = 102;
  int COLON = 103;
  int SC_OR = 104;
  int SC_AND = 105;
  int PLUS = 106;
  int MINUS = 107;
  int STAR = 108;
  int SLASH = 109;
  int DATATYPE = 110;
  int AT = 111;
  int PN_CHARS_BASE = 112;
  int PN_CHARS_U = 113;
  int PN_CHARS = 114;
  int PN_PREFIX = 115;
  int PN_LOCAL = 116;
  int VARNAME = 117;
  int UNKNOWN = 118;

  int DEFAULT = 0;

  String[] tokenImage = {
    "<EOF>",
    "\"<<\"",
    "\">>\"",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "<WS>",
    "<SINGLE_LINE_COMMENT>",
    "<IRIref>",
    "<PNAME_NS>",
    "<PNAME_LN>",
    "<BLANK_NODE_LABEL>",
    "<VAR1>",
    "<VAR2>",
    "<LANGTAG>",
    "<A2Z>",
    "<A2ZN>",
    "\"a\"",
    "\"base\"",
    "\"prefix\"",
    "\"select\"",
    "\"distinct\"",
    "\"reduced\"",
    "\"describe\"",
    "\"construct\"",
    "\"ask\"",
    "\"limit\"",
    "\"offset\"",
    "\"order\"",
    "\"by\"",
    "\"asc\"",
    "\"desc\"",
    "\"named\"",
    "\"from\"",
    "\"where\"",
    "\"and\"",
    "\"graph\"",
    "\"optional\"",
    "\"union\"",
    "\"as\"",
    "\"ext\"",
    "\"group\"",
    "\"having\"",
    "\"agg\"",
    "\"count\"",
    "\"min\"",
    "\"max\"",
    "\"sum\"",
    "\"avg\"",
    "\"stdev\"",
    "\"filter\"",
    "\"bound\"",
    "\"str\"",
    "\"datatype\"",
    "\"lang\"",
    "\"langmatches\"",
    "\"isURI\"",
    "\"isIRI\"",
    "\"isBlank\"",
    "\"isLiteral\"",
    "\"regex\"",
    "\"sameTerm\"",
    "\"true\"",
    "\"false\"",
    "<DIGITS>",
    "<INTEGER>",
    "<DECIMAL>",
    "<DOUBLE>",
    "<INTEGER_POSITIVE>",
    "<DECIMAL_POSITIVE>",
    "<DOUBLE_POSITIVE>",
    "<INTEGER_NEGATIVE>",
    "<DECIMAL_NEGATIVE>",
    "<DOUBLE_NEGATIVE>",
    "<EXPONENT>",
    "\"\\\"\\\"\\\"\"",
    "\"\\\'\\\'\\\'\"",
    "<ECHAR>",
    "<STRING_LITERAL1>",
    "<STRING_LITERAL2>",
    "<STRING_LITERAL_LONG1>",
    "<STRING_LITERAL_LONG2>",
    "\"(\"",
    "\")\"",
    "<NIL>",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "<ANON>",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"=\"",
    "\"!=\"",
    "\">\"",
    "\"<\"",
    "\"<=\"",
    "\">=\"",
    "\"!\"",
    "\"~\"",
    "\":\"",
    "\"||\"",
    "\"&&\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"^^\"",
    "\"@\"",
    "<PN_CHARS_BASE>",
    "<PN_CHARS_U>",
    "<PN_CHARS>",
    "<PN_PREFIX>",
    "<PN_LOCAL>",
    "<VARNAME>",
    "<UNKNOWN>",
  };

}
