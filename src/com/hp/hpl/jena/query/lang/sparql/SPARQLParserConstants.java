/* Generated By:JavaCC: Do not edit this line. SPARQLParserConstants.java */
/*

 * (c) Copyright 2004, 2005, 2006, 2007 Hewlett-Packard Development Company, LP

 * All rights reserved.

 */
package com.hp.hpl.jena.query.lang.sparql ;

public interface SPARQLParserConstants {

  int EOF = 0;
  int WS = 6;
  int SINGLE_LINE_COMMENT = 7;
  int Q_IRIref = 8;
  int QNAME_NS = 9;
  int QNAME_LN = 10;
  int BLANK_NODE_LABEL = 11;
  int VAR1 = 12;
  int VAR2 = 13;
  int LANGTAG = 14;
  int A2Z = 15;
  int A2ZN = 16;
  int KW_A = 17;
  int BASE = 18;
  int PREFIX = 19;
  int SELECT = 20;
  int DISTINCT = 21;
  int DESCRIBE = 22;
  int CONSTRUCT = 23;
  int ASK = 24;
  int LIMIT = 25;
  int OFFSET = 26;
  int ORDER = 27;
  int BY = 28;
  int ASC = 29;
  int DESC = 30;
  int NAMED = 31;
  int FROM = 32;
  int WHERE = 33;
  int AND = 34;
  int GRAPH = 35;
  int OPTIONAL = 36;
  int UNION = 37;
  int FILTER = 38;
  int BOUND = 39;
  int STR = 40;
  int DTYPE = 41;
  int LANG = 42;
  int LANGMATCHES = 43;
  int IS_URI = 44;
  int IS_IRI = 45;
  int IS_BLANK = 46;
  int IS_LITERAL = 47;
  int REGEX = 48;
  int SAME_TERM = 49;
  int TRUE = 50;
  int FALSE = 51;
  int INTEGER = 52;
  int DECIMAL = 53;
  int DOUBLE = 54;
  int EXPONENT = 55;
  int QUOTE_3D = 56;
  int QUOTE_3S = 57;
  int ECHAR = 58;
  int STRING_LITERAL1 = 59;
  int STRING_LITERAL2 = 60;
  int STRING_LITERAL_LONG1 = 61;
  int STRING_LITERAL_LONG2 = 62;
  int DIGITS = 63;
  int LPAREN = 64;
  int RPAREN = 65;
  int NIL = 66;
  int LBRACE = 67;
  int RBRACE = 68;
  int LBRACKET = 69;
  int RBRACKET = 70;
  int ANON = 71;
  int SEMICOLON = 72;
  int COMMA = 73;
  int DOT = 74;
  int EQ = 75;
  int NE = 76;
  int GT = 77;
  int LT = 78;
  int LE = 79;
  int GE = 80;
  int BANG = 81;
  int TILDE = 82;
  int COLON = 83;
  int SC_OR = 84;
  int SC_AND = 85;
  int PLUS = 86;
  int MINUS = 87;
  int STAR = 88;
  int SLASH = 89;
  int DATATYPE = 90;
  int AT = 91;
  int NCCHAR1P = 92;
  int NCCHAR1 = 93;
  int NCCHAR = 94;
  int NCNAME_PREFIX = 95;
  int NCNAME = 96;
  int VARNAME = 97;
  int UNKNOWN = 98;

  int DEFAULT = 0;

  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "<WS>",
    "<SINGLE_LINE_COMMENT>",
    "<Q_IRIref>",
    "<QNAME_NS>",
    "<QNAME_LN>",
    "<BLANK_NODE_LABEL>",
    "<VAR1>",
    "<VAR2>",
    "<LANGTAG>",
    "<A2Z>",
    "<A2ZN>",
    "\"a\"",
    "\"base\"",
    "\"prefix\"",
    "\"select\"",
    "\"distinct\"",
    "\"describe\"",
    "\"construct\"",
    "\"ask\"",
    "\"limit\"",
    "\"offset\"",
    "\"order\"",
    "\"by\"",
    "\"asc\"",
    "\"desc\"",
    "\"named\"",
    "\"from\"",
    "\"where\"",
    "\"and\"",
    "\"graph\"",
    "\"optional\"",
    "\"union\"",
    "\"filter\"",
    "\"bound\"",
    "\"str\"",
    "\"datatype\"",
    "\"lang\"",
    "\"langmatches\"",
    "\"isURI\"",
    "\"isIRI\"",
    "\"isBlank\"",
    "\"isLiteral\"",
    "\"regex\"",
    "\"sameTerm\"",
    "\"true\"",
    "\"false\"",
    "<INTEGER>",
    "<DECIMAL>",
    "<DOUBLE>",
    "<EXPONENT>",
    "\"\\\"\\\"\\\"\"",
    "\"\\\'\\\'\\\'\"",
    "<ECHAR>",
    "<STRING_LITERAL1>",
    "<STRING_LITERAL2>",
    "<STRING_LITERAL_LONG1>",
    "<STRING_LITERAL_LONG2>",
    "<DIGITS>",
    "\"(\"",
    "\")\"",
    "<NIL>",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "<ANON>",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"=\"",
    "\"!=\"",
    "\">\"",
    "\"<\"",
    "\"<=\"",
    "\">=\"",
    "\"!\"",
    "\"~\"",
    "\":\"",
    "\"||\"",
    "\"&&\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"^^\"",
    "\"@\"",
    "<NCCHAR1P>",
    "<NCCHAR1>",
    "<NCCHAR>",
    "<NCNAME_PREFIX>",
    "<NCNAME>",
    "<VARNAME>",
    "<UNKNOWN>",
  };

}
