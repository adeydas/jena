/**
 * File:    Schema2HSQL.java
 * Created: 05-Apr-2006
 * Author:  Damian Steer
 * 
 * (c) Copyright 2006, Hewlett-Packard Development Company, LP, all rights reserved.
 *
 * $Id: Schema2HSQL.java,v 1.3 2006/04/23 18:40:23 andy_seaborne Exp $
 */
package com.hp.hpl.jena.sdb.layout2;

import static com.hp.hpl.jena.sdb.util.StrUtils.strjoin;
import static com.hp.hpl.jena.sdb.util.StrUtils.strjoinNL;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.hp.hpl.jena.sdb.sql.SDBConnection;
import com.hp.hpl.jena.sdb.sql.SDBExceptionSQL;
import com.hp.hpl.jena.sdb.sql.SQLUtils;

/**
 * @author pldms
 *
 */
public class Schema2HSQL //extends Schema2Bulk
{
    // TODO Needs porting to Store structures
    
	private static Log log = LogFactory.getLog(Schema2HSQL.class) ;
	public void reformat(SDBConnection conn)
    { 
        reformatPrefixes(conn) ;
        reformatNodesTable(conn) ;
        reformatTriplesTable(conn) ;
    }
	
	private void reformatPrefixes(SDBConnection conn)
    {
        try {
        	if (SQLUtils.hasTable(conn.getSqlConnection(), TablePrefixes.tableName))
        		conn.execAny("DROP TABLE "+TablePrefixes.tableName) ;
        	
            conn.execAny(strjoinNL(
                                 "CREATE TABLE "+TablePrefixes.tableName+" (",
                                 "    prefix VARCHAR("+TablePrefixes.prefixColWidth+") BINARY NOT NULL ,",
                                 "    uri VARCHAR("+TablePrefixes.uriColWidth+") BINARY NOT NULL ,", 
                                 "    PRIMARY KEY  (prefix)",
                                 ")"            
                    )) ;
        } catch (SQLException ex)
        {
            log.warn("Exception resetting table "+TablePrefixes.tableName) ;
            throw new SDBExceptionSQL("SQLException resetting table '"+TablePrefixes.tableName+"'",ex) ;
        }
        
    }

	private void reformatNodesTable(SDBConnection conn)
    { 
        try {
        	if (SQLUtils.hasTable(conn.getSqlConnection(), TableNodes.tableName))
        		conn.execAny("DROP TABLE "+TableNodes.tableName) ;

            conn.execAny(strjoinNL(
                                 "CREATE TABLE "+TableNodes.tableName+" (",
                                 "   id INTEGER GENERATED BY DEFAULT AS IDENTITY,",
                                 "   hash BIGINT NOT NULL,",
                                 "   lex LONGVARCHAR default '' NOT NULL,",
                                 "   lang varchar default '' NOT NULL,",
                                 "   datatype varchar("+TableNodes.UriLength+") default '' NOT NULL,",
                                 "   type integer default '0' NOT NULL,",
                                 "   vInt integer default '0' NOT NULL,", 
                                 "   vDouble double precision default '0' NOT NULL,", 
                                 "   vDateTime timestamp default '0000-00-00 00:00:00' NOT NULL,",
                                 "   PRIMARY KEY (id)",
                                 ")"            
                    )) ;
            conn.execAny("CREATE UNIQUE INDEX Hash ON " + TableNodes.tableName + " (hash)");
        } catch (SQLException ex)
        {
            log.warn("Exception resetting table "+TableNodes.tableName) ;
            throw new SDBExceptionSQL("SQLException resetting table '"+TableNodes.tableName+"'",ex) ;
        }
    }
    
    private void reformatTriplesTable(SDBConnection conn)
    {
        try {
        	if (SQLUtils.hasTable(conn.getSqlConnection(), TableTriples.tableName))
        		conn.execAny("DROP TABLE "+TableTriples.tableName) ;
        	
            conn.execAny(strjoinNL(
                                 "CREATE TABLE "+TableTriples.tableName+" (",
                                 "    s integer default '0' NOT NULL,",
                                 "    p integer default '0' NOT NULL,",
                                 "    o integer default '0' NOT NULL,",
                                 "    PRIMARY KEY (s, p, o)",
                                 ")"                
                    )) ;
            conn.execAny("CREATE INDEX SubjObj ON " + TableTriples.tableName + "(s, o);") ;
            conn.execAny("CREATE INDEX ObjPred ON " + TableTriples.tableName + "(o, p);") ;
            //conn.execAny("CREATE INDEX Pred    ON " + TableTriples.tableName + "(p);") ;
            
        } catch (SQLException ex)
        {
            log.warn("Exception resetting table "+TableTriples.tableName) ; 
            throw new SDBExceptionSQL("SQLException resetting table '"+TableTriples.tableName+"'",ex) ;
        }
    }
    
    //@Override
    protected void createLoaderTable(SDBConnection connection) throws SQLException
    {
    	Connection conn = connection.getSqlConnection();
    	
    	if (SQLUtils.hasTable(conn, "NTrip")) return;
    	
    	PreparedStatement stmt;
    	stmt = conn
		.prepareStatement(strjoin(
				"\n",
				"CREATE TEMPORARY TABLE NTrip",
				"(",
				"shash BIGINT NOT NULL,",
				"slex LONGVARCHAR NOT NULL,",
				"stype integer NOT NULL,",
				"phash BIGINT NOT NULL,",
				"plex LONGVARCHAR NOT NULL,",
				"ptype integer NOT NULL,",
				"hash BIGINT NOT NULL,",
				"lex LONGVARCHAR NOT NULL,",
				"lang varchar(10) NOT NULL,",
				"datatype varchar(" + TableNodes.UriLength
						+ ") NOT NULL,",
				"type integer NOT NULL,",
				"vInt integer NOT NULL,",
				"vDouble double precision NOT NULL,",
				"vDateTime timestamp NOT NULL",
				")"));
    	stmt.execute();
    }
}
