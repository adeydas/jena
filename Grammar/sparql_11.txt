
DOCUMENT START
TOKENS
// ------------------------------------------
// Tokens

// Comments and whitespace
<DEFAULT> SKIP : {
" "
| "\t"
| "\n"
| "\r"
| "\f"
}

<DEFAULT> TOKEN : {
<#WS: " " | "\t" | "\n" | "\r" | "\f">
}

<DEFAULT> SPECIAL : {
<SINGLE_LINE_COMMENT: "#" (~["\n","\r"])* ("\n" | "\r" | "\r\n")?>
}

// Main tokens */
<DEFAULT> TOKEN : {
<IRIref: "<" (~[">","<","\"","{","}","^","\\","|","`","\u0000"-" "])* ">">
| <PNAME_NS: (<PN_PREFIX>)? ":">
| <PNAME_LN: <PNAME_NS> <PN_LOCAL>>
| <BLANK_NODE_LABEL: "_:" <PN_LOCAL>>
| <VAR1: "?" <VARNAME>>
| <VAR2: "$" <VARNAME>>
| <LANGTAG: <AT> (<A2Z>)+ ("-" (<A2ZN>)+)*>
| <#A2Z: ["a"-"z","A"-"Z"]>
| <#A2ZN: ["a"-"z","A"-"Z","0"-"9"]>
}

// -------------------------------------------------
// Keyworks : includes operators that are words and should be
// before general things like IDENTIFIER which swallow almost
// anything
<DEFAULT> TOKEN : {
<KW_A: "a">
}

<DEFAULT> TOKEN [IGNORE_CASE] : {
<BASE: "base">
| <PREFIX: "prefix">
| <SELECT: "select">
| <DISTINCT: "distinct">
| <REDUCED: "reduced">
| <DESCRIBE: "describe">
| <CONSTRUCT: "construct">
| <ASK: "ask">
| <LIMIT: "limit">
| <OFFSET: "offset">
| <ORDER: "order">
| <BY: "by">
| <BINDINGS: "bindings">
| <UNDEF: "undef">
| <ASC: "asc">
| <DESC: "desc">
| <NAMED: "named">
| <FROM: "from">
| <WHERE: "where">
| <AND: "and">
| <GRAPH: "graph">
| <OPTIONAL: "optional">
| <UNION: "union">
| <SERVICE: "service">
| <EXISTS: "exists">
| <NOT: "not">
| <NOTEXISTS: "not" (<WS>)* "exists">
| <MINUS_P: "minus">
| <AS: "as">
| <GROUP: "group">
| <HAVING: "having">
| <SEPARATOR: "separator">
| <AGG: "agg">
| <COUNT: "count">
| <MIN: "min">
| <MAX: "max">
| <SUM: "sum">
| <AVG: "avg">
| <STDDEV: "stdev">
| <SAMPLE: "sample">
| <GROUP_CONCAT: "group_concat">
| <FILTER: "filter">
| <BOUND: "bound">
| <COALESCE: "coalesce">
| <IN: "in">
| <NOT_IN: "not" (<WS>)* "in">
| <IF: "if">
| <BNODE: "bnode">
| <IRI: "iri">
| <URI: "uri">
| <CAST: "cast">
| <STR: "str">
| <STRLANG: "strlang">
| <STRDT: "strdt">
| <DTYPE: "datatype">
| <LANG: "lang">
| <LANGMATCHES: "langmatches">
| <IS_URI: "isURI">
| <IS_IRI: "isIRI">
| <IS_BLANK: "isBlank">
| <IS_LITERAL: "isLiteral">
| <REGEX: "regex">
| <SAME_TERM: "sameTerm">
| <TRUE: "true">
| <FALSE: "false">
}

// SPARQL/Update parts.
<DEFAULT> TOKEN [IGNORE_CASE] : {
<INSERT: "insert">
| <DELETE: "delete">
| <DATA: "data">
| <LOAD: "load">
| <CLEAR: "clear">
| <CREATE: "create">
| <SILENT: "silent">
| <DROP: "drop">
| <INTO: "into">
| <DFT: "default">
| <WITH: "with">
}

// -------------------------------------------------
<DEFAULT> TOKEN : {
<#DIGITS: (["0"-"9"])+>
| <INTEGER: <DIGITS>>
| <DECIMAL: <DIGITS> "." (<DIGITS>)* | "." <DIGITS>>
| <DOUBLE: (["0"-"9"])+ "." (["0"-"9"])* <EXPONENT> | "." (["0"-"9"])+ <EXPONENT> | (["0"-"9"])+ <EXPONENT>>
| <INTEGER_POSITIVE: <PLUS> <INTEGER>>
| <DECIMAL_POSITIVE: <PLUS> <DECIMAL>>
| <DOUBLE_POSITIVE: <PLUS> <DOUBLE>>
| <INTEGER_NEGATIVE: <MINUS> <INTEGER>>
| <DECIMAL_NEGATIVE: <MINUS> <DECIMAL>>
| <DOUBLE_NEGATIVE: <MINUS> <DOUBLE>>
| <#EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+>
| <#QUOTE_3D: "\"\"\"">
| <#QUOTE_3S: "\'\'\'">
| <ECHAR: "\\" ("t" | "b" | "n" | "r" | "f" | "\\" | "\"" | "\'")>
| <STRING_LITERAL1: "\'" (~["\'","\\","\n","\r"] | <ECHAR>)* "\'">
| <STRING_LITERAL2: "\"" (~["\"","\\","\n","\r"] | <ECHAR>)* "\"">
| <STRING_LITERAL_LONG1: <QUOTE_3S> (("\'" | "\'\'")? (~["\'","\\"] | <ECHAR>))* <QUOTE_3S>>
| <STRING_LITERAL_LONG2: <QUOTE_3D> (("\"" | "\"\"")? (~["\"","\\"] | <ECHAR>))* <QUOTE_3D>>
}

<DEFAULT> TOKEN : {
<LPAREN: "(">
| <RPAREN: ")">
| <NIL: <LPAREN> (<WS> | <SINGLE_LINE_COMMENT>)* <RPAREN>>
| <LBRACE: "{">
| <RBRACE: "}">
| <LBRACKET: "[">
| <RBRACKET: "]">
| <ANON: <LBRACKET> (<WS> | <SINGLE_LINE_COMMENT>)* <RBRACKET>>
| <SEMICOLON: ";">
| <COMMA: ",">
| <DOT: ".">
| <EQ: "=">
| <NE: "!=">
| <GT: ">">
| <LT: "<">
| <LE: "<=">
| <GE: ">=">
| <BANG: "!">
| <TILDE: "~">
| <COLON: ":">
| <SC_OR: "||">
| <SC_AND: "&&">
| <PLUS: "+">
| <MINUS: "-">
| <STAR: "*">
| <SLASH: "/">
| <DATATYPE: "^^">
| <AT: "@">
| <VBAR: "|">
| <CARAT: "^">
| <FPATH: "->">
| <RPATH: "<-">
| <QMARK: "?">
}

// See XML chars.txt for notes
<DEFAULT> TOKEN : {
<#PN_CHARS_BASE: ["A"-"Z"] | ["a"-"z"] | ["\u00c0"-"\u00d6"] | ["\u00d8"-"\u00f6"] | ["\u00f8"-"\u02ff"] | ["\u0370"-"\u037d"] | ["\u037f"-"\u1fff"] | ["\u200c"-"\u200d"] | ["\u2070"-"\u218f"] | ["\u2c00"-"\u2fef"] | ["\u3001"-"\ud7ff"] | ["\uf900"-"\ufffd"]>
| <#PN_CHARS_U: <PN_CHARS_BASE> | "_">
| <#PN_CHARS: <PN_CHARS_U> | "-" | ["0"-"9"] | "\u00b7" | ["\u0300"-"\u036f"] | ["\u203f"-"\u2040"]>
| <#PN_PREFIX: <PN_CHARS_BASE> ((<PN_CHARS> | ".")* <PN_CHARS>)?>
| <#PN_LOCAL: (<PN_CHARS_U> | ["0"-"9"]) ((<PN_CHARS> | ".")* <PN_CHARS>)?>
| <#VARNAME: (<PN_CHARS_U> | ["0"-"9"]) (<PN_CHARS_U> | ["0"-"9"] | "\u00b7" | ["\u0300"-"\u036f"] | ["\u203f"-"\u2040"])*>
}

// Catch-all tokens.  Must be last.  
// Any non-whitespace.  Causes a parser exception, rather than a
// token manager error (with hidden line numbers).
// Only bad IRIs (e.g. spaces) now give unhelpful parse errors.
<DEFAULT> TOKEN : {
<#UNKNOWN: (~[" ","\t","\n","\r","\f"])+>
}

NON-TERMINALS
// Common top for single entry point.
	Top	:=	Prologue ( Query | Update ) <EOF>
// Query only entry point
	QueryUnit	:=	Prologue Query <EOF>
	Query	:=	( SelectQuery | ConstructQuery | DescribeQuery | AskQuery )
	Prologue	:=	( BaseDecl )? ( PrefixDecl )*
	BaseDecl	:=	<BASE> IRI_REF
	PrefixDecl	:=	<PREFIX> <PNAME_NS> IRI_REF
// ---- Query type clauses
	SelectQuery	:=	SelectClause ( DatasetClause )* WhereClause SolutionModifier BindingsClause
	SubSelect	:=	SelectClause WhereClause SolutionModifier
	SelectClause	:=	<SELECT> ( <DISTINCT> | <REDUCED> )? ( ( Var | ( <LPAREN> Expression <AS> Var <RPAREN> ) )+ | <STAR> )
	ConstructQuery	:=	<CONSTRUCT> ConstructTemplate ( DatasetClause )* WhereClause SolutionModifier
	DescribeQuery	:=	<DESCRIBE> ( ( VarOrIRIref )+ | <STAR> ) ( DatasetClause )* ( WhereClause )? SolutionModifier
	AskQuery	:=	<ASK> ( DatasetClause )* WhereClause
// ----
	DatasetClause	:=	<FROM> ( DefaultGraphClause | NamedGraphClause )
	DefaultGraphClause	:=	SourceSelector
	NamedGraphClause	:=	<NAMED> SourceSelector
	SourceSelector	:=	IRIref
	WhereClause	:=	( <WHERE> )? GroupGraphPattern
	SolutionModifier	:=	( GroupClause )? ( HavingClause )? ( OrderClause )? ( LimitOffsetClauses )?
	GroupClause	:=	<GROUP> <BY> ( GroupCondition )+
	GroupCondition	:=	( BuiltInCall | FunctionCall | <LPAREN> Expression ( <AS> Var )? <RPAREN> | Var )
	HavingClause	:=	<HAVING> ( HavingCondition )+
	HavingCondition	:=	Constraint
	OrderClause	:=	<ORDER> <BY> ( OrderCondition )+
	OrderCondition	:=	( ( ( <ASC> | <DESC> ) BrackettedExpression ) | ( Constraint | Var ) )
	LimitOffsetClauses	:=	( LimitClause ( OffsetClause )? | OffsetClause ( LimitClause )? )
	LimitClause	:=	<LIMIT> <INTEGER>
	OffsetClause	:=	<OFFSET> <INTEGER>
	BindingsClause	:=	( <BINDINGS> ( Var )+ <LBRACE> ( <LPAREN> ( BindingValue )+ <RPAREN> )* <RBRACE> )?
	BindingValue	:=	IRIref
		|	RDFLiteral
		|	NumericLiteral
		|	BooleanLiteral
		|	<UNDEF>
// ---- SPARQL/Update (submission)


// Update only entry point
	UpdateUnit	:=	Prologue Update <EOF>
	Update	:=	( Update1 )+
// SPARQL 1.1 Update
	Update1	:=	( Modify | Load | Clear | Drop | Create ) ( <SEMICOLON> )?
	Modify	:=	( <WITH> IRIref )? ( Insert | Delete )
	Insert	:=	<INSERT> ( <DATA> QuadData | QuadTemplate <WHERE> GroupGraphPattern )
	Delete	:=	<DELETE> ( <DATA> QuadData | <WHERE> QuadTemplate | QuadTemplate ( <INSERT> QuadTemplate )? <WHERE> GroupGraphPattern )
	Clear	:=	<CLEAR> GraphRef
	Load	:=	<LOAD> ( IRIref )+ ( <INTO> GraphRef )?
	Drop	:=	<DROP> ( <SILENT> )? IRIref
	Create	:=	<CREATE> ( <SILENT> )? IRIref
	GraphRef	:=	( <DFT> | IRIref )
	QuadTemplate	:=	<LBRACE> Quads <RBRACE>
	Quads	:=	( TriplesTemplate )? ( QuadsNotTriples ( <DOT> )? ( TriplesTemplate )? )*
// @@ Java broken
	QuadsNotTriples	:=	<GRAPH> VarOrIRIref <LBRACE> TriplesTemplate <RBRACE>
	TriplesTemplate	:=	TriplesSameSubject ( <DOT> ( TriplesTemplate )? )?
//Ground data
// @@
	QuadData	:=	<LBRACE> Quads <RBRACE>
// UPDATE_SPARQL_11

// UPDATE


// ---- General Graph Pattern 
	GroupGraphPattern	:=	<LBRACE> ( SubSelect | GroupGraphPatternSub ) <RBRACE>
	GroupGraphPatternSub	:=	( TriplesBlock )? ( GraphPatternNotTriples ( <DOT> )? ( TriplesBlock )? )*
// -- TriplesBlock
// Two versions - for SPARQL 1.0 and SPARQL 1.1 (with paths)

// #ifdef SPARQL_10
// Element TriplesBlock(ElementTriplesBlock acc) : { }
// {
//   { if ( acc == null )
//         acc = new ElementTriplesBlock() ;
//   }
//   TriplesSameSubject(acc)
//   ( <DOT> (TriplesBlock(acc))? )?
//     { return acc ; }
// }
// #endif
	TriplesBlock	:=	TriplesSameSubjectPath ( <DOT> ( TriplesBlock )? )?
// -----
	GraphPatternNotTriples	:=	( GroupOrUnionGraphPattern | OptionalGraphPattern | MinusGraphPattern | GraphGraphPattern | ServiceGraphPattern | Filter )
// ---- Definitions of each pattern element
	OptionalGraphPattern	:=	<OPTIONAL> GroupGraphPattern
	GraphGraphPattern	:=	<GRAPH> VarOrIRIref GroupGraphPattern
	ServiceGraphPattern	:=	<SERVICE> VarOrIRIref GroupGraphPattern
	MinusGraphPattern	:=	<MINUS_P> GroupGraphPattern
// Element UnionGraphPattern() : { Element el ; }
// {
//     <UNION>
//     el = GroupGraphPattern()
//     { return new ElementUnion(el) ; }
// }


// SPARQL 1.0: {pattern} UNION {pattern} UNION {pattern} ... :: 
// SPARQL 1.1 may introduce: { pattern UNION pattern UNION ... }


// G (union G)* can be a single group pattern
// or a group pattern as part of an union.
	GroupOrUnionGraphPattern	:=	GroupGraphPattern ( <UNION> GroupGraphPattern )*
	Filter	:=	<FILTER> Constraint
	Constraint	:=	( BrackettedExpression | BuiltInCall | FunctionCall )
	FunctionCall	:=	IRIref ArgList
	ArgList	:=	( <NIL> | <LPAREN> ( <DISTINCT> )? Expression ( <COMMA> Expression )* <RPAREN> )
// ExprList Params() : { Expr expr ;  ExprList args = new ExprList() ; Token t = null ; }
// { 
//   // "; name=expr ..."
//   t = <SEMICOLON>
//   {
//     if ( ! allowAggregatesInExpressions )
//           throwParseException("Aggregate expression not legal at this point",
//                                t.beginLine, t.beginColumn) ;
//   }
//   (
//     expr = Expression() { args.add(expr) ; } 
//     (<COMMA> expr = Expression() { args.add(expr) ; } )*
//   )?
//   { return args ; }
// }

// // Single expression aggregate argument
// Expr ExprAggArg() : { Expr expr = null ; boolean distinct = false ; Token t ; }
// {
//   <LPAREN>
//   ( t = <DISTINCT> { distinct = true ; }
//     {
//      if ( ! allowAggregatesInExpressions )
//           throwParseException("Aggregate expression not legal at this point",
//                               t.beginLine, t.beginColumn) ;
//      }
//   )?
//   expr = Expression()
//   <RPAREN> 
//   { return expr ; }
// }
	ExpressionList	:=	( <NIL> | <LPAREN> Expression ( <COMMA> Expression )* <RPAREN> )
// -------- Construct patterns
	ConstructTemplate	:=	<LBRACE> ( ConstructTriples )? <RBRACE>
	ConstructTriples	:=	TriplesSameSubject ( <DOT> ( ConstructTriples )? )?
// -------- Triple lists with property and object lists
// -------- Without paths: entry: TriplesSameSubject
	TriplesSameSubject	:=	VarOrTerm PropertyListNotEmpty
		|	TriplesNode PropertyList
	PropertyListNotEmpty	:=	Verb ObjectList ( <SEMICOLON> ( Verb ObjectList )? )*
	PropertyList	:=	( PropertyListNotEmpty )?
	ObjectList	:=	Object ( <COMMA> Object )*
	Object	:=	GraphNode
	Verb	:=	( VarOrIRIref | <KW_A> )
// -------- BGPs with paths.
// -------- Entry point: TriplesSameSubjectPath
	TriplesSameSubjectPath	:=	VarOrTerm PropertyListNotEmptyPath
		|	TriplesNode PropertyListPath
	PropertyListNotEmptyPath	:=	( VerbPath | VerbSimple ) ObjectList ( <SEMICOLON> ( ( VerbPath | VerbSimple ) ObjectList )? )*
	PropertyListPath	:=	( PropertyListNotEmpty )?
	VerbPath	:=	Path
	VerbSimple	:=	Var
// End paths stuff.

// -------- Paths
// Weakest outermost
	Path	:=	PathAlternative
	PathAlternative	:=	PathSequence ( <VBAR> PathSequence )*
	PathSequence	:=	PathEltOrInverse ( <SLASH> PathEltOrInverse | <CARAT> PathElt )*
// Path unit element, no inverse
	PathElt	:=	PathPrimary ( PathMod )?
// Path unit element, including inverse.
	PathEltOrInverse	:=	( PathElt | <CARAT> PathElt )
	PathMod	:=	( <STAR> | <QMARK> | <PLUS> | <LBRACE> ( Integer ( <COMMA> ( <RBRACE> | Integer <RBRACE> ) | <RBRACE> ) ) )
	PathPrimary	:=	( IRIref | <KW_A> | <BANG> PathNegatedPropertyClass | <LPAREN> Path <RPAREN> )
	PathNegatedPropertyClass	:=	( PathOneInPropertyClass | <LPAREN> ( PathOneInPropertyClass ( <VBAR> PathOneInPropertyClass )* )? <RPAREN> )
	PathOneInPropertyClass	:=	( IRIref | <KW_A> | <CARAT> IRIref )
	Integer	:=	<INTEGER>
// -------- Triple expansions

// Anything that can stand in a node slot and which is
// a number of triples
	TriplesNode	:=	Collection
		|	BlankNodePropertyList
	BlankNodePropertyList	:=	<LBRACKET> PropertyListNotEmpty <RBRACKET>
// ------- RDF collections
	Collection	:=	<LPAREN> ( GraphNode )+ <RPAREN>
// -------- Nodes in a graph pattern or template
	GraphNode	:=	VarOrTerm
		|	TriplesNode
	VarOrTerm	:=	( Var | GraphTerm )
// Property (if no bNodes) + DESCRIBE
	VarOrIRIref	:=	( Var | IRIref )
	Var	:=	( <VAR1> | <VAR2> )
	GraphTerm	:=	IRIref
		|	RDFLiteral
		|	NumericLiteral
		|	BooleanLiteral
		|	BlankNode
		|	<NIL>
// -------- Constraint syntax
	Expression	:=	ConditionalOrExpression
	ConditionalOrExpression	:=	ConditionalAndExpression ( <SC_OR> ConditionalAndExpression )*
	ConditionalAndExpression	:=	ValueLogical ( <SC_AND> ValueLogical )*
	ValueLogical	:=	RelationalExpression
	RelationalExpression	:=	NumericExpression ( <EQ> NumericExpression | <NE> NumericExpression | <LT> NumericExpression | <GT> NumericExpression | <LE> NumericExpression | <GE> NumericExpression | <IN> ExpressionList | <NOT_IN> ExpressionList )?
	NumericExpression	:=	AdditiveExpression
	AdditiveExpression	:=	MultiplicativeExpression ( <PLUS> MultiplicativeExpression | <MINUS> MultiplicativeExpression | ( NumericLiteralPositive | NumericLiteralNegative ) ( ( <STAR> UnaryExpression ) | ( <SLASH> UnaryExpression ) )? )*
	MultiplicativeExpression	:=	UnaryExpression ( <STAR> UnaryExpression | <SLASH> UnaryExpression )*
	UnaryExpression	:=	<BANG> PrimaryExpression
		|	<PLUS> PrimaryExpression
		|	<MINUS> PrimaryExpression
		|	PrimaryExpression
	PrimaryExpression	:=	( BrackettedExpression | BuiltInCall | IRIrefOrFunction | RDFLiteral | NumericLiteral | BooleanLiteral | Var | Aggregate )
	BrackettedExpression	:=	<LPAREN> Expression <RPAREN>
	BuiltInCall	:=	<STR> <LPAREN> Expression <RPAREN>
		|	<LANG> <LPAREN> Expression <RPAREN>
		|	<LANGMATCHES> <LPAREN> Expression <COMMA> Expression <RPAREN>
		|	<DTYPE> <LPAREN> Expression <RPAREN>
		|	<BOUND> <LPAREN> Var <RPAREN>
		|	<IRI> <LPAREN> Expression <RPAREN>
		|	<URI> <LPAREN> Expression <RPAREN>
		|	<BNODE> ( <LPAREN> Expression <RPAREN> | <NIL> )
		|	<COALESCE> ExpressionList
		|	<IF> <LPAREN> Expression <COMMA> Expression <COMMA> Expression <RPAREN>
		|	<STRLANG> <LPAREN> Expression <COMMA> Expression <RPAREN>
		|	<STRDT> <LPAREN> Expression <COMMA> Expression <RPAREN>
		|	<SAME_TERM> <LPAREN> Expression <COMMA> Expression <RPAREN>
		|	<IS_IRI> <LPAREN> Expression <RPAREN>
		|	<IS_URI> <LPAREN> Expression <RPAREN>
		|	<IS_BLANK> <LPAREN> Expression <RPAREN>
		|	<IS_LITERAL> <LPAREN> Expression <RPAREN>
		|	RegexExpression
		|	ExistsFunc
		|	NotExistsFunc
	RegexExpression	:=	<REGEX> <LPAREN> Expression <COMMA> Expression ( <COMMA> Expression )? <RPAREN>
	ExistsFunc	:=	<EXISTS> GroupGraphPattern
	NotExistsFunc	:=	<NOTEXISTS> GroupGraphPattern
	Aggregate	:=	( <COUNT> <LPAREN> ( <DISTINCT> )? ( <STAR> | Expression ) <RPAREN> | <SUM> <LPAREN> ( <DISTINCT> )? Expression <RPAREN> | <MIN> <LPAREN> ( <DISTINCT> )? Expression <RPAREN> | <MAX> <LPAREN> ( <DISTINCT> )? Expression <RPAREN> | <AVG> <LPAREN> ( <DISTINCT> )? Expression <RPAREN> | <SAMPLE> <LPAREN> ( <DISTINCT> )? Expression <RPAREN> | <GROUP_CONCAT> <LPAREN> ( <DISTINCT> )? Expression ( <SEMICOLON> <SEPARATOR> <EQ> String )? <RPAREN> )
// See also FunctionCall.
// The case of "q:name()" or "q:agg()" or just "q:name"
// by expanding out FunctionCall()
	IRIrefOrFunction	:=	IRIref ( ArgList )?
	RDFLiteral	:=	String ( ( <LANGTAG> ) | ( <DATATYPE> IRIref ) )?
	NumericLiteral	:=	( NumericLiteralUnsigned | NumericLiteralPositive | NumericLiteralNegative )
	NumericLiteralUnsigned	:=	<INTEGER>
		|	<DECIMAL>
		|	<DOUBLE>
	NumericLiteralPositive	:=	<INTEGER_POSITIVE>
		|	<DECIMAL_POSITIVE>
		|	<DOUBLE_POSITIVE>
	NumericLiteralNegative	:=	<INTEGER_NEGATIVE>
		|	<DECIMAL_NEGATIVE>
		|	<DOUBLE_NEGATIVE>
	BooleanLiteral	:=	<TRUE>
		|	<FALSE>
	String	:=	( <STRING_LITERAL1> | <STRING_LITERAL2> | <STRING_LITERAL_LONG1> | <STRING_LITERAL_LONG2> )
	IRIref	:=	IRI_REF
		|	PrefixedName
	PrefixedName	:=	( <PNAME_LN> | <PNAME_NS> )
	BlankNode	:=	<BLANK_NODE_LABEL>
		|	<ANON>
	IRI_REF	:=	<IRIref>

DOCUMENT END
