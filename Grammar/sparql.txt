
DOCUMENT START
NON-TERMINALS
	CompilationUnit	:=	Query <EOF>
	Query	:=	Prolog ( SelectQuery | ConstructQuery | DescribeQuery | AskQuery )
	Prolog	:=	( BaseDecl )? ( PrefixDecl )*
	BaseDecl	:=	<BASE> Q_IRI_REF
	PrefixDecl	:=	<PREFIX> <QNAME_NS> Q_IRI_REF
// ---- Query type clauses
	SelectQuery	:=	<SELECT> ( <DISTINCT> )? ( ( Var )+ | <STAR> ) ( DatasetClause )* WhereClause SolutionModifier
	ConstructQuery	:=	<CONSTRUCT> ConstructTemplate ( DatasetClause )* WhereClause SolutionModifier
	DescribeQuery	:=	<DESCRIBE> ( ( VarOrIRIref )+ | <STAR> ) ( DatasetClause )* ( WhereClause )? SolutionModifier
	AskQuery	:=	<ASK> ( DatasetClause )* WhereClause
// ----
	DatasetClause	:=	<FROM> ( DefaultGraphClause | NamedGraphClause )
	DefaultGraphClause	:=	SourceSelector
	NamedGraphClause	:=	<NAMED> SourceSelector
	SourceSelector	:=	IRIref
	WhereClause	:=	( <WHERE> )? GroupGraphPattern
	SolutionModifier	:=	( OrderClause )? ( LimitOffsetClauses )?
	LimitOffsetClauses	:=	( LimitClause ( OffsetClause )? | OffsetClause ( LimitClause )? )
	OrderClause	:=	<ORDER> <BY> ( OrderCondition )+
	OrderCondition	:=	( ( ( <ASC> | <DESC> ) BrackettedExpression ) | ( Constraint | Var ) )
	LimitClause	:=	<LIMIT> <INTEGER>
	OffsetClause	:=	<OFFSET> <INTEGER>
// ---- General Graph Pattern 
	GroupGraphPattern	:=	<LBRACE> GraphPatternElement <RBRACE>
// Without {}
	GraphPatternElement	:=	( TriplesBlock )? ( ( GraphPatternNotTriples | Filter ) ( <DOT> )? GraphPatternElement )?
	TriplesBlock	:=	TriplesSameSubject ( <DOT> ( TriplesBlock )? )?
// -----
	GraphPatternNotTriples	:=	( OptionalGraphPattern | GroupOrUnionGraphPattern | GraphGraphPattern )
// ---- Definitions of each pattern element
	OptionalGraphPattern	:=	<OPTIONAL> GroupGraphPattern
	GraphGraphPattern	:=	<GRAPH> VarOrIRIref GroupGraphPattern
// G (union G)* can be a single group pattern
// or a group pattern as part of an union.
	GroupOrUnionGraphPattern	:=	GroupGraphPattern ( <UNION> GroupGraphPattern )*
	Filter	:=	<FILTER> Constraint
	Constraint	:=	( BrackettedExpression | BuiltInCall | FunctionCall )
	FunctionCall	:=	IRIref ArgList
	ArgList	:=	( <NIL> | <LPAREN> Expression ( <COMMA> Expression )* <RPAREN> )
// -------- Construct patterns
	ConstructTemplate	:=	<LBRACE> ( ConstructTriples )? <RBRACE>
//@@ Bug - multiple DOTs?
	ConstructTriples	:=	TriplesSameSubject ( <DOT> ( ConstructTriples )? )?
// -------- Triple lists with property and object lists
	TriplesSameSubject	:=	VarOrTerm PropertyListNotEmpty
		|	TriplesNode PropertyList
// @@ Non-recursive for Turtle long PropertyList tests
// void PropertyListNotEmpty(Node s) : { Node p ; }
// {
//   p = Verb()
//   ObjectList(s, p)
//   (<SEMICOLON> (p = Verb() ObjectList(s, p))? )*
// }
	PropertyList	:=	( PropertyListNotEmpty )?
	PropertyListNotEmpty	:=	Verb ObjectList ( <SEMICOLON> PropertyList )?
	ObjectList	:=	GraphNode ( <COMMA> ObjectList )?
// @@ Non-recursive for Turtle long PropertyList tests
// void ObjectList(Node s, Node p): { Node o ; } 
// {
//   Object(s, p)
//   ( <COMMA> Object(s, p) )*
// }
// 
// void Object(Node s, Node p): { Node o ; }
// {
//   o = GraphNode() 
//   { Triple t = new Triple(s,p,o) ; 
//     emitTriple(token.beginLine, token.beginColumn, t) ; }  
// }
	Verb	:=	( VarOrIRIref | <KW_A> )
// -------- Triple expansions

// Anything that can stand in a node slot and which is
// a number of triples
	TriplesNode	:=	Collection
		|	BlankNodePropertyList
	BlankNodePropertyList	:=	<LBRACKET> PropertyListNotEmpty <RBRACKET>
// ------- RDF collections
	Collection	:=	<LPAREN> ( GraphNode )+ <RPAREN>
// -------- Nodes in a graph pattern or template
	GraphNode	:=	VarOrTerm
		|	TriplesNode
	VarOrTerm	:=	( Var | GraphTerm )
// Property (if no bNodes) + DESCRIBE
	VarOrIRIref	:=	( Var | IRIref )
// // GRAPH and property if including blank nodes are properties.
// Node VarOrBlankNodeOrIRIref() : {Node n = null ; }
// {
//   ( n = Var() | n = BlankNode() | n = IRIref() )
//   { return n ; }
// }
	Var	:=	( <VAR1> | <VAR2> )
// Not suitable for use in expressions
// because of sign-handling, and <NIL>
	GraphTerm	:=	IRIref
		|	RDFLiteral
		|	( <MINUS> | <PLUS> )? NumericLiteral
		|	BooleanLiteral
		|	BlankNode
		|	<NIL>
// -------- Constraint syntax
	Expression	:=	ConditionalOrExpression
	ConditionalOrExpression	:=	ConditionalAndExpression ( <SC_OR> ConditionalAndExpression )*
	ConditionalAndExpression	:=	ValueLogical ( <SC_AND> ValueLogical )*
	ValueLogical	:=	RelationalExpression
	RelationalExpression	:=	NumericExpression ( <EQ> NumericExpression | <NE> NumericExpression | <LT> NumericExpression | <GT> NumericExpression | <LE> NumericExpression | <GE> NumericExpression )?
	NumericExpression	:=	AdditiveExpression
	AdditiveExpression	:=	MultiplicativeExpression ( <PLUS> MultiplicativeExpression | <MINUS> MultiplicativeExpression )*
	MultiplicativeExpression	:=	UnaryExpression ( <STAR> UnaryExpression | <SLASH> UnaryExpression )*
	UnaryExpression	:=	<BANG> PrimaryExpression
		|	<PLUS> PrimaryExpression
		|	<MINUS> PrimaryExpression
		|	PrimaryExpression
	PrimaryExpression	:=	( BrackettedExpression | BuiltInCall | IRIrefOrFunction | RDFLiteral | NumericLiteral | BooleanLiteral | Var )
	BrackettedExpression	:=	<LPAREN> Expression <RPAREN>
	BuiltInCall	:=	<STR> <LPAREN> Expression <RPAREN>
		|	<LANG> <LPAREN> Expression <RPAREN>
		|	<LANGMATCHES> <LPAREN> Expression <COMMA> Expression <RPAREN>
		|	<DTYPE> <LPAREN> Expression <RPAREN>
		|	<BOUND> <LPAREN> Var <RPAREN>
		|	<SAME_TERM> <LPAREN> Expression <COMMA> Expression <RPAREN>
		|	<IS_IRI> <LPAREN> Expression <RPAREN>
		|	<IS_URI> <LPAREN> Expression <RPAREN>
		|	<IS_BLANK> <LPAREN> Expression <RPAREN>
		|	<IS_LITERAL> <LPAREN> Expression <RPAREN>
		|	RegexExpression
	RegexExpression	:=	<REGEX> <LPAREN> Expression <COMMA> Expression ( <COMMA> Expression )? <RPAREN>
// The case of "q:name()" or just "q:name"
// by expanding out FunctionCall()
	IRIrefOrFunction	:=	IRIref ( ArgList )?
	RDFLiteral	:=	String ( ( <LANGTAG> ) | ( <DATATYPE> IRIref ) )?
	NumericLiteral	:=	<INTEGER>
		|	<DECIMAL>
		|	<DOUBLE>
	BooleanLiteral	:=	<TRUE>
		|	<FALSE>
	String	:=	( <STRING_LITERAL1> | <STRING_LITERAL2> | <STRING_LITERAL_LONG1> | <STRING_LITERAL_LONG2> )
	IRIref	:=	Q_IRI_REF
		|	QName
	QName	:=	( <QNAME_LN> | <QNAME_NS> )
	BlankNode	:=	<BLANK_NODE_LABEL>
		|	<ANON>
	Q_IRI_REF	:=	<Q_IRIref>

DOCUMENT END
