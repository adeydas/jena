/* Grammar extract - JSON tokens, parser state <JSON> */

// Do \ u inside JavaCC??


TOKEN [IGNORE_CASE] : 
{ 
  <JSON: "json" >
|  <NULL: "null">
}

<JSONX> SKIP : { " " | "\t" | "\n" | "\r" | "\f" }

<JSONX> TOKEN :
{
  < #J_AZ: ( ["A"-"Z"] | ["a"-"z"] ) >
| < J_COLON: 	":" > : DEFAULT
| < #J_DIGITS: (["0"-"9"])+>
| < J_KEY_STRING:  (<J_AZ> | "_") ( <J_AZ> | "_" | <J_DIGITS> )*>
}


void JsonTemplateQuery() : {}
{
    <JSON>
    json()
    WhereClause()
    SolutionModifier()
}

void json() : {}
{
    { jsonStartParse() ; }
    JObject()
    { jsonFinishParse() ; }
}
 

void json_any() : {}
{
    { jsonStartParse() ; }
    (JValue())?
    { jsonFinishParse() ; }
}


// ---- Structures

void JValue() : {}
{
 JSimpleValue()
| JObject()
| JArray()
}

void JObject() : { }
{
  <LBRACE> 
  { jsonStartObject() ; }
  (JMembers())?
  { jsonFinishObject(); }
  <RBRACE>
}

void JMembers() : {}
{
  JPair() 
  (<COMMA> JPair())* 
}

void JPair() : {}
{ 
  // Flip tokenizer state purely so we can have the COLON matched.
  { token_source.SwitchTo(JSONX) ; }
  { jsonStartPair() ; }
  //( JString() | JKeyString() )
  JString()
  { jsonKeyPair() ; }
  <J_COLON>
  JValue()
  { jsonFinishPair() ; }
}

void JArray() : {}
{
   <LBRACKET> 
    { jsonStartArray() ; }
	(JElements())?
    { jsonFinishArray() ; }
   <RBRACKET>
}

void JElements() : { }
{
    JArrayValue()
    (<COMMA> JArrayValue())*
}

void JArrayValue() : { }
{
    JValue() { jsonElement() ; }
}

// ---- 

void JSimpleValue() : {}
{
  JString()
| JNumber()
| JTrue()
| JFalse()
| JNull()
}

void JNumber() : { Token t ; }
{
  t = <INTEGER> 		{ jsonValueInteger(t.image) ; }
| t = <DECIMAL>		 	{ jsonValueDecimal(t.image) ; }
| t = <DOUBLE>			{ jsonValueDouble(t.image) ; }
| t = <INTEGER_POSITIVE>	{ jsonValueInteger(t.image) ; }
| t = <DECIMAL_POSITIVE>	{ jsonValueDecimal(t.image) ; }
| t = <DOUBLE_POSITIVE>		{ jsonValueDouble(t.image) ; }
| t = <INTEGER_NEGATIVE>	{ jsonValueInteger(t.image) ; }
| t = <DECIMAL_NEGATIVE>	{ jsonValueDecimal(t.image) ; }
| t = <DOUBLE_NEGATIVE>		{ jsonValueDouble(t.image) ; }
}

void JString() : { Token t ; }
{
  t = <STRING_LITERAL2> { jsonValueString(t.image); } 
}

void JKeyString() : { Token t ; }
{
  t = <PNAME_NS> { jsonValueKeyString(t.image); } 
}

void JVar() : { Token t ; }
{
   (t = <VAR1> | t = <VAR2> ) { jsonValueVar(t.image) ; }
}

void JTrue() : { Token t ; }
{
  <TRUE> { jsonValueBoolean(true) ; }
}

void JFalse() : { Token t ; }
{
  <FALSE> { jsonValueBoolean(false) ; }
}

void JNull() : { Token t ; }
{
  <NULL> { jsonValueNull() ; }
}
