SDB ToDo list (and general notes)
=================================

+ Creating models: both SDBFactory and StoreFactory do this.
  SDBFactory should be the place!
  
+ Add query tests :
  SELECT * {}
  SELECT ?x {}
  SELECT * { P OPTIONAL { P OPTIONAL { OPTIONAL } } }

+ Compile hooks
      Subclassing a BlockCompiler still need hooks.
	BGP => BGP
        startCompile can return a modifed block?
        c.f. Customizer - a dynamically loaded piece of code.
	BGP => SQL (part of compilation)
    One feature may need both.

+ "Script" - factory for lots of things.
  or is this SDBFactory?  -> Add the connection ones from SDBConnection

+ Abstracting databases:
  1/ The Jena2 way of config files.
  2/ Attach to an SDBConnection
    That is the unit of database if there are multiple stores per connection.
    Or maybe a Store features?
      A/ regex syntax
      B/ Table exists code (Classes, Value tables etc).
      C/ VARCHAR/TEXT/BLOB syntax
        HSQLDB: VARCHAR unlimited
        MySQL: TEXT
        PosgreSQL:
          http://www.postgresql.org/docs/8.1/interactive/datatype.html
          TEXT, bytea
    How about an internal representation of table
    then have a syntax generator per connection/store?
       Table name + (name, type [null?])

+ Proper order for BGPs.

+ StoreRDB
  1/ use jena assembler for ModelRDB? Separate section in config graph
  2/ Need to fudge to work with jdbc:none.
  

+ more in .shared.

+ ValueTables
  String value table
    With no URIs, much shorter.
    Full text indexing where available?

+ Use SQL COALESCE for OPTIONALs with shared variables

+ Subquery scoping enhancements

SqlExpr::
IJ-R-T => IJ(r)-T is done specially - make a special stage (RA optimizer?)
OR improve the generation of SQL output and leave the tree much as is.
OR canonical tree SPJ

HSQL/MySQL joint testing

== Next
  ==> Performance testing framework

Detachable connections

Slony-I replication support (unique keys)

c.f. SQLCache and returning prepared statements
  Named parameters in INSERT for robustness.
  Sequences, not autoIncrement

Encode upper/lower case into SQL identifiers.
  SQLidAllocate(String) => String
  SPARQLid2SQLid and reverse
    Off ramp only needed => not needed at all but eaier to see what's going on
    
Need to handle connection management to be concurrency and connection pooling friendly.

+ Test for 
   + FILTER and out-of-block variables ; OPTIONAL { FILTER (?x = .. ) ?x :p ?q }
   + Nested optionals with var not used by outer one (bottom up/top down issue)
   + Two optionals with a shared var
