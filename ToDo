==== ARQ ToDo

ARQ2-beta
+ ** Document "stages"

-----

== Core

+ Test for qexec evaluation => tests algebra

+ Alternative indexes
  LARQ idea - extracted.  Object ==> node/subject
  
+ REDUCED tests :-(

+ Serilization: 
    redo "prefix" to be SSE compatible.
    op: triples/quads as lists themselves (+builder)

+ Property function to property path expression

+ Non-distinguished variable removal.
   StageBuilder - strict place
   In a project (or pseudo project) - does it once.
      Need test case : { _:a :p ?v. ?v :splitIRI (?ns ?ln) . _a :p ?w } 
      
+ testing QE1 and QE2 and QE3 in the same test run

+ Commands
  + qtest to use modules (and qexpr)
    ModVersion

== Algebra

+ OpWalker  - only used for getting vars, and that needs to truncate a walk.
+ OpExt - is this still workable?
+ Extensions:
+ qexec tidy/integration
+ Tests
  
== SSE
  Builder tidying:
    Build

  Expr: (exists (pattern ...))
  
  TableBase => .output/.toString etc as PrintSerializable
  
  undef and _

  (group (vars) aggregate)
  
  Assignment:
  (assign ((?x expr) (?y expr)) --  (:= ?x expr) [is this SELECT/project?]
     (project ...))
     (project (?x ?y (?z expr)) ...)

   # TableBuilder for testing ASAP.
  
  (prefix (x: <x> y: <y>)
  (table [(cols ?c1 ?c2)]		# Makes it like a results format
  	(row (?x :x1) (?y :y1))
  	(row ?x :x1 ?y :y1)
	((?x :x2) (?y :y2))
	)
	
  (binding) is a simplified table?  With exprs?
  (binding (?x :x1) (?y :y1) (?z (+ 1 ?s))
    which join of the single row table formed from the binding.
  
+ Prefix writing.

== LARQ

+ LARQ assembler

+ LARQ Doc internals
  Fields: index, lex/lang/datatype, uri, bnode

== Documentation

+ Document list handling as a specific page.
  + Internals
  	Query iterators
  	Bindings

+ Writing filter functions [Done]
+ Writing property functions

+ Document making and using datasets
+ Location-mapping and FROM/FROM NAMED
  
== Core

+ XML results: process xml:lang on other elements than just <literal>
  Documentation for XML result set processing
