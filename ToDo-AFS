SDB ToDo list (and general notes)
=================================

== Wiki
+ Document assembler for dataset on wiki
+ Break out the merge query section into a separate wiki page.

== Development

+ LayoutType, DatabaseType have a common concept
  And it should be regexp matching.

+ Generalise target table beyond triples/quads (e.g. the metatable)
  URI => handler(table name, special code)
 
+ Graph management:
    Graphs loaded
    Delete graph
    Add new graph (and load of unknown graph fails?)
    Replace graph
  
 
+ Tests with SDB.getContext().setTrue(SDB.unionDefaultGraph) ;
  --set in manifest?

+ SqlProject/SqlRename are now highly related - merge - or simplifiy.
  [Partial - need to consider a "pure" SqlProject]  

+ What about bulk add/delete of whole graphs? 
  esp removal of a complete named graph.
  Does bulk delete of a named graph work more efficiently? Is it worth it?
    Generalize: delect by BGP.

+ New SQLgenerator
    IJ-R-T => IJ(r)-T is done specially in old generator? 
    COALESCE and SqlSelectBlocks

+ See the effect of "enable_seqscan = off" for PostgreSQL
 
+ JDBC statement management in execQuery

+ Setting options for testing.
+ Use cursors for streaming / PostgreSQL [DONE - test]

+ StoreLoader => StoreLoaderPlus.

+ DB type tables

+ OpUnion

== Tests
+ DISTINCT, Slice, Project, including when not all of a query is translated.

== Alt layouts

+ Layout3 : property tables : vertical partition
   + simple, general version - per propety table - no ?p (except by massive union or separate client processing)

== Pattern table and inference

+ Cache tables - integrate with inf and rewriter 
  This unifies two concepts.
  Also calculated paths : cache tables of (?s,?o) for { ?s :p1 ?x . ?x :p2 ?o }

+ Pattern/Inf tables:
  Data:
    Q: { :s a ?t }  D: :s a :C1 . :s a :C2 .  : SC: (:C1, :C2) => duplicates
    Could reduce the input to exclude :s a :C2.
    But if schema changes?
    Else need SELECT DISTINCT subquery.
  Reduce data?  is there always a minimum?  No - but synthetic?
  Or nested SELECT DISTINCT in SQL.

== Graph Management

  Delete model, Clear model, Create model
    Only load is model exists?
    Check in GraphSDB
  Need a "graph ids" table

== Value tables and FILTERs

+ Value-based hashing
  String version - and have fixed choice of xsd:string or plain string for terms.
  Partial alternative: condition is "T.o = hash1 OR T.o = hash2"

+ ValueTables
  Values and conditions : reactivate condition compilation.
  String value table
    With no URIs, much shorter.
    Full text indexing where available?
  Isolate QC2.insertValueGetter

== Design

+ Filters

+ Tidy DB formatting
    per DB list of column generators (getVarchar, getText etc).

+ SPARQL/Update input and control

== Testing

+ Project/Slice/Distinct tests, including partial rewrite/integration tests 

+ Add query tests :
  /Structure/ { opt ... } JOIN { opt ... } 
  
== Misc

+ canonicalise literals on input?

  + Restrict(Join(A,B)) == Join(A,B,condition)
    In rel algebra, don't push into conditions: do in code generation.
  + Precedence-driven output for SqlExpr // SqlExprGenerateSQL, not lots of nesting.
  + SELECT/one table ==> move constraints out (it's just SPJ)
    Put in a SqlNode optimizer stage, just before generation
      IJ-R-T => IJ(r)-T is done specially 
   
+ QueryEngineSDB has duplication with QueryEngineMain - eliminate!
