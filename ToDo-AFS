SDB ToDo list (and general notes)
=================================

+ Scoping on SqlNodes
  Value tests: casting vs tables

+ cmd: 
  @ --load for sdb.sdbquery --format
     Done - but should be ModData/ModInit/ModSetup
  @ Have the function of command have a execOn(Store) option so it can be constructed outside.
    Better - have a collection of cmd utility classes that do the work of the commands 
    that can be called directly from code.  Control block for verbose/time/general stuff.
  @ Mapper of property, args ==> slot.

+ Add query tests :
  SELECT * {}
  SELECT ?x {}
  SELECT * { P[?x] OPTIONAL { P[!?x] OPTIONAL { OPTIONAL P[?x] } } }

+ Abstracting databases:
  1/ The Jena2 way of config files.
  2/ graph for an SDBConnection (or get from DB).
    That is the unit of database if there are multiple stores per connection.
    Or maybe a Store features?
      A/ regex syntax
      B/ Table exists code (Classes, Value tables etc).
      C/ VARCHAR/TEXT/BLOB syntax
        HSQLDB: VARCHAR unlimited
        MySQL: TEXT
        PosgreSQL:
          http://www.postgresql.org/docs/8.1/interactive/datatype.html
          TEXT, bytea
    How about an internal representation of table
    then have a syntax generator per connection/store?
       Table name + (name, type [null?])

+ Proper order for BGPs.

+ more in .shared.

+ ValueTables
  String value table
    With no URIs, much shorter.
    Full text indexing where available?

+ Use SQL COALESCE for OPTIONALs with shared variables

+ Subquery scoping enhancements

SqlExpr::
IJ-R-T => IJ(r)-T is done specially - make a special stage (RA optimizer?)
OR improve the generation of SQL output and leave the tree much as is.
OR canonical tree SPJ

== Next
  ==> Performance testing framework

c.f. SQLCache and returning prepared statements
  Named parameters in INSERT for robustness.
  Sequences, not autoIncrement
