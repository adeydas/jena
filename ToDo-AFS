SDB ToDo list (and general notes)
=================================

+ { opt ... } JOIN { opt ... } needs a JoinCondition involving nulls.
  Or punting.

+ Coalesce needs to redefine scopes on the way through.
    And allocate a name for the coalesce'd var.
  Values - Coalesce or do outside?
    Outside ie DELAY (and use IS NOT NULL)
  pass-through vars do not not need renaming but use of SELECT may force it.

+ ??Delay values until (1) filter or (2) projection
  Currently done in the QuadBlock.
  Or will the SQL optimizer work this out?

+ Derby:
    Loader is OneTriple loader for present.
    Easy win - hash version?  

+ Scoping on SqlNodes
  Value tests: casting vs tables

+ Hash constants
   need separate formatters and loaders.

+ cmd: 
  @ --load for sdb.sdbquery --format
     Done - but should be ModData/ModInit/ModSetup
+ Add query tests :
  SELECT * {}
  SELECT ?x {}
  SELECT * { P[?x] OPTIONAL { P[!?x] OPTIONAL { OPTIONAL P[?x] } } }

+ Abstracting databases:
  Graph for an SDBConnection (or get from DB).
    That is the unit of database if there are multiple stores per connection.
    Or maybe a Store features?
      A/ regex syntax
      B/ Table exists code (Classes, Value tables etc).

+ Abstract columns types then simple templating.
        VARCHAR/TEXT/BLOB syntax
        HSQLDB: VARCHAR unlimited
        MySQL: TEXT
        PosgreSQL:
          http://www.postgresql.org/docs/8.1/interactive/datatype.html
          TEXT, bytea

+ more in .shared.

+ ValueTables
  String value table
    With no URIs, much shorter.
    Full text indexing where available?

+ Graph pattern tables

+ Subquery scoping enhancements

SqlExpr::
IJ-R-T => IJ(r)-T is done specially - make a special stage (RA optimizer?)
OR improve the generation of SQL output and leave the tree much as is.
OR canonical tree SPJ

== Next
  ==> Performance testing framework
