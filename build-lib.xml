<project xmlns:ivy="antlib:org.apache.ivy.ant" name="lib">

  <!-- ========================================== -->
  <!-- ==== Configuration  -->

  <!-- == Assumes==
       ++ Properties
       Name
       name
       version
       [or
           version-major
           version-minor
           version-revision
           version-status
       ]
       javadoc.packages       Package list (comma separated)  (Optional)
       javadoc.packages.all   Package list (comma separated)  (Optional)
       build.metadata.file    (Optional)
          The metadata file to add to the build (Java properties)

       Copyright.text
       
       ++ Paths
       java.source.path

       ++ Fileset (source files to release)
       fileset.src
 
       == Library of standard tasks
       clean      clean up
       clean-once clean up once - can depend on this repeatedly - wil run first time only.
       compile    compile sources
       jar        make jar 
       publish    export to maven

       == Assumes directory layout
       doc/
       doc/javadoc
       doc/javadoc-all
       lib/
       build/
       build/classes
       build/artifacts
       reports/
       reports/xml
       testing/
       (src as per path)

       == Other
       JUnit test suites look like TS_*
       
  -->

  <!-- Set version from components (if not already set) -->
  <property    name="version"  
               value="${version-major}.${version-minor}.${version-revision}${version-status}"/>

  <!-- Artifacts -->
  <property name="jarfile"                value="${name}-${version}.jar"/>

  <!-- Assumes Ivy classifiers work. -->
  <property name="src.artifact"           value="${name}-${version}-sources.jar"/>
  <property name="javadoc.artifact"       value="${name}-${version}-javadoc.jar"/>
  <property name="pomfile"                value="${name}-${version}.pom"/>
  <property name="pomfile.template"       value="${name}.pom"/>

  <!-- zip files version of the source and javadoc artifacts -->
  <property name="src.zipfile"            value="${name}-src-${version}.zip"/>
  <property name="javadoc.zipfile"        value="${name}-javadoc-${version}.zip"/>

  <!-- Places -->
  <property name="doc.dir"                value="doc"/>
  <property name="javadoc.dir"            value="${doc.dir}/javadoc"/>
  <property name="javadoc.all.dir"        value="${doc.dir}/javadoc-all"/>
  <property name="lib.dir"                value="lib"/>

  <!-- Testing - scripts and data files -->
  <property name="test.dir"               value="testing"/>

  <!-- Build area - locally publising in ivy is to build/pub --> 
  <property name="build.dir"              value="build"/>
  <property name="build.classes.dir"      value="${build.dir}/classes"/>
  <property name="artifacts.dir"          value="${build.dir}/artifacts"/>
  <property name="pub.dir.local"          location="${build.dir}/pub"/>

  <property name="ivy.keyfile"            location="${env.IVYKEY}"/>
  <property name="ivy.user"               value="${env.IVYUSER}"/>

  <!-- Other -->
  <property name="javadoc.title"          value="${Name}"/>

  <property name="build.metadata.file"          value="unset"/>
  <property name="build.metadata.file.dest"     value="${build.classes.dir}/${build.metadata.file}"/>
  <property name="build.metadata.file.src"      value="${src.dir}/${build.metadata.file}"/>

  <!-- Testing -->
  <property name="reports.dir"            value="reports"/>
  <property name="reports.dir.xml"        value="reports/xml"/>
  <property name="reports.outdir"         value="reports"/>

  <!-- ========================================== -->
  <!-- ==== Setup  -->

  <!-- This must be after IVY has done it's dependence stuff --> 
  
  <!-- See also ant task <pathconvert> -->

  <path id="java.build.class.path">
    <fileset dir="${lib.dir}" includes="*.jar" excludes="${jarfile}"/>
  </path>

  <path id="java.run.class.path">
    <!-- jar file may, or may not, be in the lib directory -->
    <fileset dir="${lib.dir}" includes="*.jar" excludes="${jarfile}"/>
    <fileset dir="${build.dir}" includes="tdb*.jar"/>
  </path>

  <tstamp>
    <format property="build.time.xsd"  pattern="yyyy-MM-dd'T'HH:mm:ssZ"/>
    <format property="build.time.txt"  pattern="yyyy-MM-dd HH:mm Z"/>
  </tstamp>

  <!-- <echo message="Build: ${build.time.xsd}"/> -->
  
  <filterset id="filters.build.metadata">
    <filter token="VERSION"           value="${version}" />
    <filter token="BUILD_TIME"        value="${build.time.txt}" />
    <filter token="BUILD_TIME_XSD"    value="${build.time.xsd}" />
  </filterset>
  
  <!--
    <filterset id="filters.shared">
    <filter token="Name"              value="${Name}" />
    <filter token="website"           value="${web.site}" />
    <filter token="version-major"     value="${version-major}" />
    <filter token="version-minor"     value="${version-minor}" />
    <filter token="version-status"    value="${version-status}" />
    <filter token="version"           value="${version}" />
    <filterset refid="filters.version"/>
    </filterset>
  -->

  <target name="javac-flags">
    <!-- Target - so can have different javac flags (properties are set once) -->
    <property name="java.debug"       value="true"/>
    <property name="java.debuglevel"  value="source,lines,vars"/>
    <property name="java.deprecation" value="true"/>
    <property name="java.optimize"    value="true"/>
    <property name="java.encoding"    value="UTF8"/>
    <property name="java.source"      value="1.6"/>
    <property name="java.target"      value="1.6"/>
  </target>

  <!-- ========================================== -->
  <!-- ==== Sources -->
  
  <!-- ========================================== -->
  <!-- ==== Build and compile -->

  <target name="compile" depends="javac-flags" description="Compile project">
    <mkdir dir="${build.classes.dir}"/>
    <javac destdir="${build.classes.dir}"
           debug="${java.debug}"
           deprecation="${java.debuglevel}"
           optimize="${java.optimize}"
           encoding="${java.encoding}"
           source="${java.source}"
           target="${java.target}"
           >
      <src refid="java.source.path"/>
      <classpath refid="java.build.class.path" />
    </javac>
  </target>

  <target name="build-properties" if="build.metadata.file">
    <!-- Delete any file compilation javac copied over -->
    <delete file="${build.metadata.file.dest}"/>
    <copy tofile="${build.metadata.file.dest}" file="${build.metadata.file.src}">
      <filterset refid="filters.build.metadata"/>
    </copy>
  </target>

  <target name="jars" depends="jar" />
  <target name="jar" depends="compile" description="Build the jar">
    <delete file="${build.dir}/${jarfile}"/>
    <!-- Insert the properties for the build into the class area -->
    <antcall target="build-properties"/>
    <jar destfile="${build.dir}/${jarfile}" basedir="${build.classes.dir}">
    </jar>
  </target>
  
  <!-- ========================================== -->
  <!-- ==== Javadoc -->

  <target name="javadoc" depends="javac-flags"
          description="Make the javadoc"
          if="javadoc.packages">
    <delete  dir="${javadoc.dir}"/>
    <mkdir   dir="${javadoc.dir}"/>
    <javadoc packagenames="${javadoc.packages}"
             destdir="${javadoc.dir}"
             author="true"
             sourcepathref="java.source.path.main"
             source="${java.source}"
             version="true"
             windowtitle="${Name}-${version} Javadoc"
             doctitle="${javadoc.title}"
             Public="true"
             Use="true"
             bottom="${copyright.text}"
             additionalparam="-breakiterator">
      <classpath refid="java.build.class.path"/>
    </javadoc>
  </target>

  <target name="javadoc-all" depends="javac-flags"
          description="Make all the javadoc"
          if="javadoc.all.packages">
    <delete  dir="${javadoc.all.dir}"/>
    <mkdir   dir="${javadoc.all.dir}"/>
    <javadoc packagenames="${javadoc.all.packages}"
             destdir="${javadoc.all.dir}"
             author="true"
             sourcepathref="java.source.path.main"
             source="${java.source}"
             version="true"
             windowtitle="${Name}-${version} Javadoc"
             doctitle="${javadoc.title}"
             Public="true"
             Use="true"
             bottom="${copyright.text}"
             additionalparam="-breakiterator">
      <classpath refid="java.build.class.path"/>
    </javadoc>
  </target>
  
  <!-- ========================================== -->
  <!-- ==== Artifacts -->       
  
  <target name="jar-artifact" depends="jar">
    <!-- <delete file="${artifacts.dir}/${jarfile}"/> -->
    <copy todir="${artifacts.dir}" file="${build.dir}/${jarfile}"/>
  </target>
  
  <target name="pom-artifact">
    <!-- <delete file="${artifacts.dir}/${pomfile}"/> -->
    <copy file="${pomfile.template}" tofile="${artifacts.dir}/${pomfile}">
      <filterset>
        <!-- <filterset refid="filters.shared"/> -->
        <filter token="VERSION" value="${version}"/>
      </filterset>
    </copy>
  </target>
  
  <target name="src-artifact">
    <jar destfile="${artifacts.dir}/${src.artifact}">
      <fileset refid="fileset.src"/>
    </jar>
  </target>

  <target name="javadoc-artifact" depends="javadoc">
    <jar destfile="${artifacts.dir}/${javadoc.artifact}" 
         basedir="${javadoc.dir}"/>
  </target>
  
  <!-- Zipped files -->

  <target name="src-zip">
    <zip destfile="${artifacts.dir}/${src.zipfile}">
      <fileset refid="fileset.src"/>
    </zip>
  </target>

 <target name="javadoc-zip" depends="javadoc">
    <jar destfile="${artifacts.dir}/${javadoc.zipfile}" 
         basedir="${javadoc.dir}"/>
  </target>
  <!-- ========================================== -->
  <!-- ==== Publication -->

  <!-- jar-artifact,pom-artifact,src-artifact,javadoc-artifact -->
  <target name="artifacts" 
          depends="jar-artifact,pom-artifact,src-artifact,javadoc-artifact"/>
  
  <target name="publish" description="Build and publish this version"
          depends="clean-once,artifacts,ivy-publish">
  </target>
  
  <!-- ========================================== -->
  <!-- ==== JUnit and reporting -->

  <target name="junit" depends="run-junit" description="Run the test suite">
    <fail message="JUnit tests failed" if="junit.failed"/>
  </target>

  <target name="report" depends="run-report" description="Run tests and generate reports">
    <fail message="JUnit tests failed" if="junit.failed"/>
  </target>

  <!-- Worker task for the above tasks -->

  <target name="run-junit" depends="clean-reports">
    <mkdir dir="${reports.dir}"/>
    <mkdir dir="${reports.dir.xml}"/>

    <!-- Don't stop on failure - set a property instead -->
    <junit printsummary="yes" errorProperty="junit.failed" failureProperty="junit.failed">
      <!-- usefile="false"  type="plain"-->
      <!-- <formatter usefile="false" type="brief"/> -->
      <formatter type="xml" />
      <classpath>
        <pathelement path="${build.classes.dir}" />
        <path refid="java.run.class.path" />
      </classpath>
      <!-- <test name="test.TS_Main" outfile="${reports.dir.xml}/junit-report"/> -->
      <batchtest todir="${reports.dir.xml}">
        <fileset dir="${src.test.dir}">
          <include name="**/TS_*.java" />
        </fileset>
        <fileset dir="${src.lib.test.dir}">
          <include name="**/TS_*.java" />
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="run-report" depends="run-junit">
    <junitreport todir="./${reports.dir}">
      <fileset dir="./${reports.dir.xml}">
        <include name="**.xml"/>
      </fileset>
      <report format="frames" todir="./${reports.outdir}"/>
    </junitreport>
  </target>

  <!-- ========================================== -->
  <!-- ==== Ivy : Dependency Management  -->

  <target name="ivy-init">
    <ivy:settings />
  </target>

  <!-- Convenience target -->
  <target name="ivy" depends="ivy-setup-lib" description="Set up for use with Eclispe">
  </target>

  <!-- DEVELOPMENT : lib2/ -->
  <target name="ivy-setup-lib" depends="ivy-init,ivy-resolve-report" 
          description="Resolve and fetch dependences with Ivy">
    <ivy:retrieve conf="dev" pattern="lib2/[artifact]-[revision](-[classifier]).[ext]" />
    <ivy:cachepath pathid="ivy.dev.classpath" conf="dev" />
  </target>

  <target name="ivy-resolve" depends="ivy-resolve-report"/>

  <target name="ivy-resolve-report" depends="ivy-init">
    <ivy:resolve conf="dev"
                 haltonfailure="false" failureproperty="ivy.resolve.failed"/>
    <ivy:report todir="${reports.dir}"/>
    <fail message="Ivy dependency failed" if="ivy.resolve.failed"/>
  </target>

  <target name="ivy-publish" depends="ivy-init,ivy-resolve">
    <!-- <ivy:resolve conf="main"/> -->
    <ivy:deliver con="main"/>
    <ivy:publish conf="main" 
                 resolver="dev-publish" 
                 overwrite="true">
      <artifacts pattern="${artifacts.dir}/[artifact]-[revision](-[classifier]).[ext]" />
    </ivy:publish>
  </target>

  <target name="publish-check">
    <fail message="Publication environment variables (IVYUSER, IVYKEY) not set">
      <condition>
        <and> 
          <not><isset property="env.IVYUSER"/></not>
          <not><isset property="env.IVYKEY"/></not>
        </and>
      </condition>
    </fail>
    <fail message="Publication environment variable (IVYUSER) not set"  unless="env.IVYUSER"/>
    <fail message="Publication environment variable (IVYKEY) not set"  unless="env.IVYKEY"/>
  </target>

  <!-- DEVELOPMENT -->
  <target name="ivy-publish-dev" depends="ivy-init,publish-check,ivy-resolve">
    <!-- <ivy:resolve conf="main"/> -->
    <ivy:publish conf="main" 
                 resolver="dev-resolver" 
                 overwrite="true"
                 forcedeliver="true">
      <artifacts pattern="${artifacts.dir}/[artifact]-[revision](-[classifier]).[ext]" />
    </ivy:publish>
  </target>

  <target name="ivy-pom" depends="ivy-init">
    <!-- Make a basic POM file -->
    <ivy:makepom ivyfile="ivy.xml" 
                 pomfile="pom-tdb-auto.xml">
      <!--
        <mapping conf="default" scope="compile"/>
        <mapping conf="runtime" scope="runtime"/>
      -->
    </ivy:makepom>
  </target>
  
  
  <!-- ========================================== -->
  <!-- ==== Run -->

  <target name="run" depends="compile">
    <java classname="${main-class}" fork="true">
      <!-- jar="${build.jar.dir}/${jarfile}"-->
      <arg value="--check"/>
      <arg value="10"/>
      <arg value="100"/>
      <classpath>
        <pathelement path="${build.classes.dir}"/>
        <path refid="java.run.class.path"/>
      </classpath>
    </java>
  </target>

  
  <!-- ========================================== -->
  <!-- ==== Misc -->

  <target name="clean" description="Clean (build and reports)"
          depends="clean-build-area,clean-reports">
  </target>

  <target name="clean-once" unless="clean.run">
    <antcall target="clean"/>
    <!-- Not inside the "clean" as it's scoped -->
    <property name="clean.run" value="set"/>
  </target>

  <target name="clean-javadoc">
    <delete dir="${javadoc.dir}"/>
    <mkdir  dir="${javadoc.dir}"/>
    <delete dir="${javadoc.all.dir}"/>
    <mkdir  dir="${javadoc.all.dir}"/>
  </target>
  
  <target name="clean-build-area">
    <delete dir="${build.dir}"/>
    <mkdir  dir="${build.dir}"/>
  </target>

  <target name="clean-reports">
    <delete dir="${reports.dir}"/>
    <delete dir="${reports.dir.xml}"/>
    <delete dir="${reports.outdir}"/>
  </target>

  <target name="clean-artifacts">
    <delete dir="${artifacts.dir}"/>
    <mkdir dir="${artifacts.dir}"/>
  </target> 
  
</project>
