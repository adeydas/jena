<project xmlns:ivy="antlib:org.apache.ivy.ant" name="lib" basedir=".">

  <!-- TODO
     Pick out lifecycle cleanly.
       pre- post-
       
initialize - compile - gather - package - publish - package 
main
  generate-sources 	
  process-sources 	
  generate-resources 	
  process-resources 	
  compile-main
test-src 	
  generate-test-sources 	
  process-test-sources 	
  generate-test-resources 	
  process-test-resources 	
  test-compile 	
  	
test

prepare-package 	
package 	
integrity
verify 	
(install) 	
deploy 	
       
     Check(write) documentation
     Publish self.
     echo lifecycle.
     http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
  --> 
    
    
  <!-- ========================================== -->

  <!-- == Files 
       build.xml         Set parameters
       build-lib.xml     Library of ant tasks
       build-dist.xml    Build a zip distribution
  -->

  <!-- ==== Configuration  -->

  <!-- == Assumes==
       ++ Properties
       Name
       name
       version

       javadoc.packages       Package list (comma separated)  (Optional)
       javadoc.packages.all   Package list (comma separated)  (Optional)
       build.metadata.file    (Optional)
          The metadata file to add to the build (Java properties)
       Copyright.text
       publish.repo
         Ivy resolver to use for publication
       ++ Paths
       java.source.path

       ++ Fileset (source files to release)
       fileset.src
 
       == Library of standard tasks
       build      Build jar, run tests and snapshot sources
       clean      clean up
       clean-once clean up once - can depend on this repeatedly - will run first time only.
       compile    compile sources
       jar        make jar
       release    make a release
       publish    export to maven
       test       Run the test suite (runs once)


		Process properties used to indicate a task has run.
			jar.run
			clean.run
			test.run
		
		The "once" tasks will run once-per-run

       == Assumes directory layout
       doc/
       doc/javadoc
       doc/javadoc-all
       lib/
       build/
       build/classes
       build/artifacts
       reports/
       reports/xml
       testing/
       (src as per path)

       == Other
       JUnit test suites look like TS_*
       
  -->

  <!-- Debugging - run "ant -d" and look for build sequence -->
  
  <!-- Set version from components (if not already set) -->
  <property    name="version"             value="unset"/>

  <!-- Artifacts -->

  <property name="artifact.base"          value="${name}-${version}"/>

  <property name="jarfile"                value="${artifact.base}.jar"/>
  <property name="jarfile.test"           value="${artifact.base}-tests.jar"/>

  <!-- Assumes Ivy classifiers work. -->
  <property name="src.artifact"           value="${artifact.base}-sources.jar"/>
  <property name="javadoc.artifact"       value="${artifact.base}-javadoc.jar"/>
  <property name="pomfile"                value="${artifact.base}.pom"/>
  <property name="pomfile.template"       value="${name}.pom"/>

  <!-- zip files version of the source and javadoc artifacts -->
  <property name="src.zipfile"            value="${artifact.base}-src.zip"/>
  <property name="javadoc.zipfile"        value="${artifact.base}-javadoc.zip"/>

  <!-- Places in distribution-->
  <property name="doc.dir"                value="doc"/>
  <property name="javadoc.dir"            value="${doc.dir}/javadoc"/>
  <property name="javadoc.all.dir"        value="${doc.dir}/javadoc-all"/>
  <property name="lib.dir"                value="lib"/>

  <!-- Testing - scripts and data files -->
  <property name="test.dir"               value="testing"/>

  <!-- Build area - locally publising in ivy is to build/pub --> 
  <property name="build.dir"              value="build"/>
  <property name="build.classes.dir"      value="${build.dir}/classes"/>
  <property name="build.classes.test.dir" value="${build.dir}/classes-test"/>
  
  <property name="artifacts.dir"          value="${build.dir}/artifacts"/>
  <property name="pub.dir.local"          location="${build.dir}/pub"/>

  <property name="ivy.keyfile"            location="${env.IVYKEY}"/>
  <property name="ivy.user"               value="${env.IVYUSER}"/>

  <property name="ivy.fetch.dir"          value="lib2"/>
  <property name="package.lib.dir"        value="${ivy.fetch.dir}"/>
  <!-- Other -->

  <property name="javadoc.title"          value="${Name}"/>
  <property name="javadoc.window.title"   value="${Name}-${version} Javadoc"/>

  <!-- <property name="build.metadata.file"          value="unset"/> Set by system -->
  <property name="build.metadata.file.dest"     value="${build.classes.dir}/${build.metadata.file}"/>
  <property name="build.metadata.file.src"      value="resources/${build.metadata.file}"/>

  <!-- Testing -->
  <property name="reports.dir"            value="reports"/>
  <property name="reports.dir.xml"        value="reports/xml"/>
  <property name="reports.outdir"         value="reports"/>

  <!-- ========================================== -->
  <!-- ==== Setup  -->
  
  <tstamp>
    <format property="build.time.xsd"  pattern="yyyy-MM-dd'T'HH:mm:ssZ"/>
    <format property="build.time.txt"  pattern="yyyy-MM-dd HH:mm Z"/>
  </tstamp>

  <filterset id="filters.build.metadata">
    <filter token="VERSION"           value="${version}" />
    <filter token="BUILD_TIME"        value="${build.time.txt}" />
    <filter token="BUILD_TIME_XSD"    value="${build.time.xsd}" />
  </filterset>
  
  <target name="javac-flags">
    <!-- Target - so can have different javac flags (properties are set once) -->
    <property name="java.debug"       value="true"/>
    <property name="java.debuglevel"  value="source,lines,vars"/>
    <property name="java.deprecation" value="true"/>
    <property name="java.optimize"    value="true"/>
    <property name="java.encoding"    value="UTF8"/>
    <property name="java.source"      value="1.5"/>
    <property name="java.target"      value="1.5"/>
  </target>
  
  <!-- ========================================== -->
  <!-- ==== Initialization and dynamic property and path setting -->

  <!-- 
    java.build.class.path       CP to compile the system
    java.build.test.class.path  CP to compile system's tests
    java.test.class.path        CP to run the test suite (should use the jar created)
    dependences.classpath       CP for the jars needed. Set by ivy.
  -->

  <target name="init">
    <echo message="Build: ${artifact.base} ${build.time.txt}"/>
  </target>

  <target name="set-classpath-build">
    <!-- This must be after IVY has done it's dependence stuff, hence as a task --> 
    <path id="java.build.class.path">
      <path refid="dependences.classpath"/>
    </path>
    <path id="java.build.test.class.path">
      <pathelement path="${build.classes.dir}" />
      <path refid="java.build.class.path" />
    </path>
  </target>          

  <target name="set-classpath-test">
    <path id="java.test.class.path">
      <path refid="dependences.classpath" />
      <pathelement location="${build.dir}/${jarfile}"/>
    </path>
  </target>

  <target name="java-init" depends="init,javac-flags,dependences,set-classpath-build"/>

  <!--<target name="dependences" depends="ivy-resolve"/>-->
  <target name="dependences" depends="ivy-fetch"/>

  <target name="test-init" depends="jar,set-classpath-test"/>

  <!-- ========================================== -->
  <!-- ==== Build, compile, jar, javadoc -->

  <target name="compile" depends="java-init,compile-main,compile-test"  description="Compile project"/>
  
  <target name="compile-main">
    <mkdir dir="${build.classes.dir}"/>

    <!--
    <pathconvert pathsep=" " property="the-classpath" refid="java.build.class.path" />
    <echo message="java.build.class.path:: ${the-classpath}"/>
    -->
    <javac destdir="${build.classes.dir}"
           debug="${java.debug}"
           deprecation="${java.debuglevel}"
           optimize="${java.optimize}"
           encoding="${java.encoding}"
           source="${java.source}"
           target="${java.target}"
           >
      <src refid="java.source.path.main"/>
      <classpath refid="java.build.class.path" />
      <compilerarg value="-Xlint:unchecked"/>
    </javac>
  </target>

  <target name="compile-test">
    <mkdir dir="${build.classes.test.dir}"/>
    <javac destdir="${build.classes.test.dir}"
           debug="${java.debug}"
           deprecation="${java.debuglevel}"
           optimize="${java.optimize}"
           encoding="${java.encoding}"
           source="${java.source}"
           target="${java.target}"
           >
      <src refid="java.source.path.test"/> 
      <classpath refid="java.build.test.class.path" />
      <compilerarg value="-Xlint:unchecked"/>
    </javac>
  </target>

  <target name="compile-dev" 
	  depends="java-init, compile-main,compile-test"
	  if="src.dev.dir" >
    <!-- Don't compile into the build area -->
    <javac destdir="classes"
           debug="${java.debug}"
           deprecation="${java.debuglevel}"
           optimize="${java.optimize}"
           encoding="${java.encoding}"
           source="${java.source}"
           target="${java.target}"
	   srcdir="${src.dev.dir}"
           >
      <classpath>
	<path refid="dependences.classpath" />
	<pathelement path="${build.classes.dir}" />
	<pathelement path="${build.classes.test.dir}" />
      </classpath>
      <compilerarg value="-Xlint:unchecked"/>
    </javac>
  </target>

  <target name="build-properties" if="build.metadata.file">
    <delete file="${build.metadata.file.dest}"/>
    <copy tofile="${build.metadata.file.dest}" file="${build.metadata.file.src}">
      <filterset refid="filters.build.metadata"/>
    </copy>
  </target>

  <target name="jar" depends="compile,build-properties,package.jar">
    <!-- Insert the properties for the build into the class area -->
    <!--
    <antcall target="build-properties"/>
    <antcall target="package.jar"/>
    -->
  </target>

  <target name="package.jar">
    <delete file="${build.dir}/${jarfile}" failonerror="false"/>
    <!--
    <jar destfile="${build.dir}/${jarfile}" basedir="${build.classes.dir}" index="yes"/>
    <jar destfile="${build.dir}/${jarfile.test}" basedir="${build.classes.test.dir}" index="yes"/>
    -->
    <!-- As one jar -->
    <jar destfile="${build.dir}/${jarfile}" index="yes">
      <fileset dir="${build.classes.dir}"/>
      <fileset dir="${build.classes.test.dir}"/>
    </jar>


  </target>

  <!-- ========================================== -->
  <!-- ==== Javadoc -->

  <target name="javadoc" depends="java-init"
          description="Make the javadoc"
          if="javadoc.packages">
    <delete  dir="${javadoc.dir}"/>
    <mkdir   dir="${javadoc.dir}"/>
    <javadoc packagenames="${javadoc.packages}"
             destdir="${javadoc.dir}"
             author="true"
             sourcepathref="java.source.path.main"
             source="${java.source}"
             version="true"
             windowtitle="${javadoc.window.title}"
             doctitle="${javadoc.title}"
             Public="true"
             Use="true"
             bottom="${copyright.text}"
             additionalparam="-breakiterator">
      <classpath refid="java.build.class.path"/>
    </javadoc>
  </target>

  <target name="javadoc-all" depends="java-init"
          description="Make all the javadoc"
          if="javadoc.all.packages">
    <delete  dir="${javadoc.all.dir}"/>
    <mkdir   dir="${javadoc.all.dir}"/>
    <javadoc packagenames="${javadoc.all.packages}"
             destdir="${javadoc.all.dir}"
             author="true"
             sourcepathref="java.source.path.main"
             source="${java.source}"
             version="true"
             windowtitle="${javadoc.window.title}"
             doctitle="${javadoc.title}"
             Public="true"
             Use="true"
             bottom="${copyright.text}"
             additionalparam="-breakiterator">
      <classpath refid="java.build.class.path"/>
    </javadoc>
  </target>

  <!-- ========================================== -->
  <!-- ==== Basic tasks -->

  <!-- Not depends="build.jar" because that will always be run even if the body is "unless"'ed out -->

  <target name="jar-once" 
	  description="Compile and build the jar, once"
	  unless="jar.run">
    <antcall target="jar"/>
    <property name="jar.run" value="done"/>
  </target>

  <target name="build" depends="clean,jar,report,src-zip" 
	  description="Clean build of the jar, and snapshot the sources used"/>

  <!-- ========================================== -->
  <!-- ==== Zipping -->

  <target name="src-zip" description="Create zip file of the sources">
    <zip destfile="${build.dir}/${src.zipfile}">
      <fileset refid="fileset.src"/>
    </zip>
  </target>

 <target name="javadoc-zip" depends="javadoc">
    <jar destfile="${build.dir}/${javadoc.zipfile}" 
         basedir="${javadoc.dir}"/>
  </target>  

  <!-- ========================================== -->
  <!-- ==== Artifacts -->       
  
  <target name="jar-artifact" depends="jar">
    <!-- <delete file="${artifacts.dir}/${jarfile}"/> -->
    <copy todir="${artifacts.dir}" file="${build.dir}/${jarfile}"/>
  </target>
  
  <target name="pom-artifact">
    <!-- <delete file="${artifacts.dir}/${pomfile}"/> -->
    <copy file="${pomfile.template}" tofile="${artifacts.dir}/${pomfile}">
      <filterset>
        <!-- <filterset refid="filters.shared"/> -->
        <filter token="VERSION" value="${version}"/>
      </filterset>
    </copy>
  </target>
  
  <target name="src-artifact">
    <jar destfile="${artifacts.dir}/${src.artifact}">
      <fileset refid="fileset.src"/>
    </jar>
  </target>

  <target name="javadoc-artifact" depends="javadoc">
    <jar destfile="${artifacts.dir}/${javadoc.artifact}" 
         basedir="${javadoc.dir}"/>
  </target>
  
  <!-- ========================================== -->
  <!-- ==== Publication -->

  <!-- jar-artifact,pom-artifact,src-artifact,javadoc-artifact -->
  <target name="artifacts" 
          depends="jar-artifact,pom-artifact,src-artifact,javadoc-artifact"/>

  <!-- Includes making the zip file -->
  <target name="publish" description="Build and publish this version, together with the zip distribution."
          depends="clean,artifacts,test,pre-publish,ivy-publish,post-publish">
  </target>

  <!-- maven name - alias for compatibility -->
  <target name="deploy" depends="publish"/>

  <target name="pre-publish" depends="package"/>

  <target name="post-publish"/>
  
  <!-- ========================================== -->
  <!-- ==== JUnit and reporting -->

  <target name="test" depends="junit"
	  description="Run the test suite"/>

  <target name="junit" 
	  depends="run-junit,run-report" description="Run the test suite">
    <fail message="JUnit tests failed" if="junit.failed"/>
    <echo message="JUnit tests passed"/>
  </target>

  <target name="report" 
	  depends="run-junit,run-report" 
	  description="Run tests and generate reports">
    <fail message="JUnit tests failed" if="junit.failed"/>
    <echo message="JUnit tests passed"/>
  </target>

  <!-- Worker task for the above tasks -->

  <target name="pre-run-junit"/>

  <target name="run-junit"
	  depends="jar,set-classpath-test,pre-run-junit,clean-reports">
    <mkdir dir="${reports.dir}"/>
    <mkdir dir="${reports.dir.xml}"/>

    <!-- Don't stop on failure - set a property instead - so reports can be written -->
    <junit fork="yes" printsummary="yes" 
	   errorProperty="junit.failed" failureProperty="junit.failed">
      <!-- usefile="false"  type="plain"-->
      <!-- <formatter usefile="false" type="brief"/> -->
      <formatter type="xml" />
      <formatter type="plain" />
      <classpath>
        <path refid="java.test.class.path" />
      </classpath>
      <!-- <test name="test.TS_Main" outfile="${reports.dir.xml}/junit-report"/> -->
      <batchtest todir="${reports.dir.xml}">
        <fileset dir="${src.test.dir}">
          <include name="**/TS_*.java" />
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="run-report" >
    <junitreport todir="./${reports.dir}">
      <fileset dir="./${reports.dir.xml}">
        <include name="**.xml"/>
      </fileset>
      <report format="frames" todir="./${reports.outdir}"/>
    </junitreport>
  </target>

  <!-- ========================================== -->
  <!-- ==== Ivy : Dependency Management  -->

  <!-- IVY operations directly -->

  <target name="ivy-init" depends="publish-check">
    <ivy:settings />
  </target>

  <target name="ivy-resolve" depends="ivy-init" description="Resolve dependences">
    <ivy:resolve conf="main"
                 haltonfailure="false" failureproperty="ivy.resolve.failed"/>
    <ivy:report todir="${reports.dir}"/>
    <fail message="Ivy dependency failed" if="ivy.resolve.failed"/>
  </target>

  <target name="ivy-retrieve" depends="ivy-init" description="Retrieve dependences">
    <ivy:retrieve conf="main" 
		  pattern="${ivy.fetch.dir}/[artifact]-[revision](-[classifier]).[ext]" 
		  sync="true"/>
  </target>

  <!-- End ivy direct operations -->

  <!-- Convenience target -->
  <target name="ivy" depends="ivy-setup-lib" description="Set up for use with Eclispe">
  </target>

  <target name="ivy-fetch" depends="ivy-init,ivy-resolve,ivy-retrieve" 
          description="Resolve and fetch dependences with Ivy">
    <path id="dependences.classpath">
      <fileset dir="${ivy.fetch.dir}" excludes="*sources.jar,*javadoc.jar"/>
    </path>
  </target>

  <!-- DEVELOPMENT : lib2/ -->
  <target name="ivy-setup-lib" depends="ivy-init" 
          description="Download dependences in dir lib2/ with Ivy">
    <ivy:resolve conf="dev"/>
    <!-- sync causes artifacts and versions no longer need to be deleted -->
    <ivy:retrieve conf="dev" pattern="lib2/[artifact]-[revision](-[classifier]).[ext]" sync="true"/>
  </target>

  <!-- Resolve and set path -->
  <target name="ivy-resolve-path" depends="ivy-resolve" description="Resolve dependences and set the classpath">
    <ivy:cachepath pathid="dependences.classpath" conf="main" />
    <!--
    <pathconvert refid="dependences.classpath" property="tmp" />
    <echo message="Path: ${tmp}"/>
    -->
  </target>
  
  <import file="build-macros.xml"/>
  
  <target name="ivy-publish-macro" depends="ivy-init">
    <!-- call resolve again ??? -->
    <publish-module ivy.file="ivy.xml" resolver="${publish.repo}"/>
  </target>

  <target name="ivy-publish" depends="ivy-init,test">
    <ivy:publish conf="main" 
                 resolver="${publish.repo}" 
                 overwrite="true">
      <artifacts pattern="${artifacts.dir}/[artifact]-[revision](-[classifier]).[ext]" />
    </ivy:publish>
  </target>

  <target name="publish-check">
    <fail message="Publication environment variables (IVYUSER, IVYKEY) not set">
      <condition>
        <and> 
          <not><isset property="env.IVYUSER"/></not>
          <not><isset property="env.IVYKEY"/></not>
        </and>
      </condition>
    </fail>
    <fail message="Publication environment variable (IVYUSER) not set"  unless="env.IVYUSER"/>
    <fail message="Publication environment variable (IVYKEY) not set"  unless="env.IVYKEY"/>
  </target>

  <!-- DEVELOPMENT -->
  <target name="ivy-publish-dev" depends="ivy-init,publish-check,ivy-resolve">
    <!-- <ivy:resolve conf="main"/> -->
    <ivy:publish conf="dev" 
                 resolver="dev-resolver" 
                 overwrite="true"
                 forcedeliver="true">
      <artifacts pattern="${artifacts.dir}/[artifact]-[revision](-[classifier]).[ext]" />
    </ivy:publish>
  </target>

  <target name="ivy-pom" depends="ivy-init">
    <!-- Make a basic POM file -->
    <ivy:makepom ivyfile="ivy.xml" 
                 pomfile="pom-tdb-auto.xml">
      <!--
        <mapping conf="default" scope="compile"/>
        <mapping conf="runtime" scope="runtime"/>
      -->
    </ivy:makepom>
  </target>
  
  
  <!-- ========================================== -->
  <!-- ==== Run -->

  <target name="run" depends="compile">
    <java classname="${main-class}" fork="true">
      <!-- jar="${build.jar.dir}/${jarfile}"-->
      <arg value="--check"/>
      <arg value="10"/>
      <arg value="100"/>
      <classpath>
        <pathelement path="${build.classes.dir}"/>
        <pathelement path="${build.classes.test.dir}"/>
        <path refid="java.run.class.path"/>
      </classpath>
    </java>
  </target>

  
  <!-- ========================================== -->
  <!-- ==== Misc -->

  <target name="clean" description="Clean (build and reports)"
          depends="clean-all">
  </target>

  <target name="clean-once" unless="clean.run">
    <antcall target="clean-all"/>
    <property name="clean.run" value="set"/>
  </target>

  <target name="clean-all" depends="clean-build-area,clean-reports">
  </target>

  <target name="clean-javadoc">
    <delete dir="${javadoc.dir}"/>
    <mkdir  dir="${javadoc.dir}"/>
    <delete dir="${javadoc.all.dir}"/>
    <mkdir  dir="${javadoc.all.dir}"/>
  </target>
  
  <target name="clean-build-area">
    <delete quiet="true" dir="${build.dir}"/>
    <mkdir  dir="${build.dir}"/>
  </target>

  <target name="clean-reports">
    <delete dir="${reports.dir}"/>
    <delete dir="${reports.dir.xml}"/>
    <delete dir="${reports.outdir}"/>
  </target>

  <target name="clean-artifacts">
    <delete dir="${artifacts.dir}"/>
    <mkdir dir="${artifacts.dir}"/>
  </target> 
  
</project>
