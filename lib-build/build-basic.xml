<project xmlns:ivy="antlib:org.apache.ivy.ant" name="basic">
  <!-- Simple build and jar - no external resolution of jars, no publishing -->
  <!-- See build-lib.xml for documentation of properties -->

  <!-- Make conditional on availability of ${version} -->
  <property name="${artifact.base}"       value="${name}"/>
  <!-- <property name="${artifact.base}"       value="${name}-${version}"/> -->

  <!-- Artifacts -->
  <property name="jarfile"                value="${artifact.base}.jar"/>
  <property name="jarfile.test"           value="${artifact.base}-tests.jar"/>

  <!-- Assumes Ivy classifiers work. -->
  <property name="src.artifact"           value="${artifact.base}-sources.jar"/>
  <property name="javadoc.artifact"       value="${artifact.base}-javadoc.jar"/>
  <property name="pomfile"                value="${artifact.base}.pom"/>
  <property name="pomfile.template"       value="${name}.pom"/>

  <!-- zip files version of the source and javadoc artifacts -->
  <property name="src.zipfile"            value="${artifact.base}-src.zip"/>
  <property name="javadoc.zipfile"        value="${artifact.base}-javadoc.zip"/>

  <!-- Places -->
  <property name="doc.dir"                value="doc"/>
  <property name="javadoc.dir"            value="${doc.dir}/javadoc"/>
  <property name="javadoc.all.dir"        value="${doc.dir}/javadoc-all"/>
  <property name="lib.dir"                value="lib"/>

  <!-- Testing - scripts and data files -->
  <property name="test.dir"               value="testing"/>

  <property name="build.dir"              value="build"/>
  <property name="build.classes.dir"      value="${build.dir}/classes"/>
  <property name="build.classes.test.dir" value="${build.dir}/classes-test"/>
  
  <property name="artifacts.dir"          value="${build.dir}/artifacts"/>
  <property name="pub.dir.local"          location="${build.dir}/pub"/>

  <property name="ivy.keyfile"            location="${env.IVYKEY}"/>
  <property name="ivy.user"               value="${env.IVYUSER}"/>

  <!-- Other -->
  <property name="javadoc.title"          value="${Name}"/>
  <property name="javadoc.window.title"   value="${Name}-${version-major}.${version-minor} Javadoc"/>

  <!-- <property name="build.metadata.file"          value="unset"/> Set by system -->
  <property name="build.metadata.file.dest"     value="${build.classes.dir}/${build.metadata.file}"/>
  <property name="build.metadata.file.src"      value="resources/${build.metadata.file}"/>

  <!-- Testing -->
  <property name="reports.dir"            value="reports"/>
  <property name="reports.dir.xml"        value="reports/xml"/>
  <property name="reports.outdir"         value="reports"/>

  <!-- ========================================== -->
  <!-- ==== Setup  -->
  
  <path id="java.run.class.path">
    <!-- jar file may, or may not, be in the lib directory -->
    <fileset dir="${lib.dir}" includes="*.jar" excludes="${jarfile}"/>
    <fileset dir="${build.dir}" includes="tdb*.jar"/>
  </path>

  <tstamp>
    <format property="build.time.xsd"  pattern="yyyy-MM-dd'T'HH:mm:ssZ"/>
    <format property="build.time.txt"  pattern="yyyy-MM-dd HH:mm Z"/>
  </tstamp>

  <filterset id="filters.build.metadata">
    <filter token="VERSION"           value="${version}" />
    <filter token="BUILD_TIME"        value="${build.time.txt}" />
    <filter token="BUILD_TIME_XSD"    value="${build.time.xsd}" />
  </filterset>
  
  <target name="javac-flags">
    <!-- Target - so can have different javac flags (properties are set once) -->
    <property name="java.debug"       value="true"/>
    <property name="java.debuglevel"  value="source,lines,vars"/>
    <property name="java.deprecation" value="true"/>
    <property name="java.optimize"    value="true"/>
    <property name="java.encoding"    value="UTF8"/>
    <property name="java.source"      value="1.5"/>
    <property name="java.target"      value="1.5"/>
  </target>
        
  <target name="set-classpath-build">
    <!-- This must be after IVY has done it's dependence stuff, hence as a task --> 
    <path id="java.build.class.path">
      <fileset dir="${lib.dir}" includes="*.jar" excludes="${jarfile}"/>
    </path>
    <path id="java.build.test.class.path">
      <pathelement path="${build.classes.dir}" />
      <path refid="java.build.class.path" />
    </path>
  </target>          

  <target name="init">
    <echo message="Build: ${artifact.base}"/>
  </target>

  <target name="java-init" depends="init,javac-flags,set-classpath-build"/>

  <target name="dependences" />

  <!-- ========================================== -->
  <!-- ==== Build, compile, jar, javadoc -->

  <target name="compile" depends="java-init,dependences,compile-main,compile-test"  description="Compile project"/>
  
  <target name="compile-main">
    <mkdir dir="${build.classes.dir}"/>

    <!--
    <pathconvert pathsep=";" property="the-path" refid="java.build.class.path" />
    <echo message="${the-path}"/>
    -->

    <javac destdir="${build.classes.dir}"
           debug="${java.debug}"
           deprecation="${java.debuglevel}"
           optimize="${java.optimize}"
           encoding="${java.encoding}"
           source="${java.source}"
           target="${java.target}"
           >
      <src refid="java.source.path.main"/>
      <classpath refid="java.build.class.path" />
      <compilerarg value="-Xlint:unchecked"/>
    </javac>
  </target>

  <target name="compile-test">
    <mkdir dir="${build.classes.test.dir}"/>
    <javac destdir="${build.classes.test.dir}"
           debug="${java.debug}"
           deprecation="${java.debuglevel}"
           optimize="${java.optimize}"
           encoding="${java.encoding}"
           source="${java.source}"
           target="${java.target}"
           >
      <src refid="java.source.path.test"/> 
      <classpath refid="java.build.test.class.path" />
      <compilerarg value="-Xlint:unchecked"/>
    </javac>
  </target>

  <target name="build-properties" if="build.metadata.file">
    <delete file="${build.metadata.file.dest}"/>
    <copy tofile="${build.metadata.file.dest}" file="${build.metadata.file.src}">
      <filterset refid="filters.build.metadata"/>
    </copy>
  </target>

  <target name="build.jar" depends="compile">
    <!-- Insert the properties for the build into the class area -->
    <antcall target="build-properties"/>
    <antcall target="package.jar"/>
  </target>

  <target name="package.jar">
    <delete file="${build.dir}/${jarfile}" failonerror="false"/>
    <!--
    <jar destfile="${build.dir}/${jarfile}" basedir="${build.classes.dir}" index="yes"/>
    <jar destfile="${build.dir}/${jarfile.test}" basedir="${build.classes.test.dir}" index="yes"/>
    -->
    <!-- As one jar -->
    <jar destfile="${build.dir}/${jarfile}" index="yes">
      <fileset dir="${build.classes.dir}"/>
      <fileset dir="${build.classes.test.dir}"/>
    </jar>


  </target>

  <!-- ========================================== -->
  <!-- ==== jars -->

  <target name="ivy-init" depends="publish-check">
    <ivy:settings />
  </target>

  <target name="ivy-fetch" depends="ivy-init" 
          description="Resolve and fetch dependences with Ivy">
    <ivy:resolve conf="main"/>
    <!-- sync causes artifacts and versions no longer need to be deleted -->
    <ivy:retrieve conf="main" pattern="${ivy.fetch.dir}/[artifact]-[revision](-[classifier]).[ext]" sync="true"/>
    <path id="dependences.classpath">
      <fileset dir="${ivy.fetch.dir}" excludes="*sources.jar,*javadoc.jar"/>
    </path>

  </target>

  <!-- ========================================== -->
  <!-- ==== Javadoc -->

  <target name="javadoc" depends="java-init"
          description="Make the javadoc"
          if="javadoc.packages">
    <delete  dir="${javadoc.dir}"/>
    <mkdir   dir="${javadoc.dir}"/>
    <javadoc packagenames="${javadoc.packages}"
             destdir="${javadoc.dir}"
             author="true"
             sourcepathref="java.source.path.main"
             source="${java.source}"
             version="true"
             windowtitle="${javadoc.window.title}"
             doctitle="${javadoc.title}"
             Public="true"
             Use="true"
             bottom="${copyright.text}"
             additionalparam="-breakiterator">
      <classpath refid="java.build.class.path"/>
    </javadoc>
  </target>

  <target name="javadoc-all" depends="java-init"
          description="Make all the javadoc"
          if="javadoc.all.packages">
    <delete  dir="${javadoc.all.dir}"/>
    <mkdir   dir="${javadoc.all.dir}"/>
    <javadoc packagenames="${javadoc.all.packages}"
             destdir="${javadoc.all.dir}"
             author="true"
             sourcepathref="java.source.path.main"
             source="${java.source}"
             version="true"
             windowtitle="${javadoc.window.title}"
             doctitle="${javadoc.title}"
             Public="true"
             Use="true"
             bottom="${copyright.text}"
             additionalparam="-breakiterator">
      <classpath refid="java.build.class.path"/>
    </javadoc>
  </target>

  <!-- ========================================== -->
  <!-- ==== Basic tasks -->

  <!-- Not depends="build.jar" because that will always be run even if the body is "unless"'ed out -->

  <target name="jar" 
	  description="Compile and build the jar"
	  unless="jar.run">
    <antcall target="build.jar"/>
    <property name="jar.run" value="done"/>
  </target>

  <target name="build" depends="clean,jar,report,src-zip" description="Clean build of the jar, and snapshot the sources used"/>

  <!-- ========================================== -->
  <!-- ==== Zipping -->

  <target name="src-zip" description="Create zip file of the sources">
    <zip destfile="${build.dir}/${src.zipfile}">
      <fileset refid="fileset.src"/>
    </zip>
  </target>

 <target name="javadoc-zip" depends="javadoc">
    <jar destfile="${build.dir}/${javadoc.zipfile}" 
         basedir="${javadoc.dir}"/>
  </target>  

  <!-- ========================================== -->
  <!-- ==== Artifacts -->       
  
  <target name="jar-artifact" depends="jar">
    <!-- <delete file="${artifacts.dir}/${jarfile}"/> -->
    <copy todir="${artifacts.dir}" file="${build.dir}/${jarfile}"/>
  </target>
  
  <target name="src-artifact">
    <jar destfile="${artifacts.dir}/${src.artifact}">
      <fileset refid="fileset.src"/>
    </jar>
  </target>

  <target name="javadoc-artifact" depends="javadoc">
    <jar destfile="${artifacts.dir}/${javadoc.artifact}" 
         basedir="${javadoc.dir}"/>
  </target>
  
  <!-- ========================================== -->
  <!-- ==== Publication -->

  <!-- jar-artifact,pom-artifact,src-artifact,javadoc-artifact -->
  <target name="artifacts" 
          depends="jar-artifact,src-artifact,javadoc-artifact"/>
  
  <!-- ========================================== -->
  <!-- ==== JUnit and reporting -->

  <target name="test" unless="test.run"
	  description="Run the test suite">
    <antcall target="junit"/>
    <property name="test.run" value="done"/>
  </target>

  <target name="junit" 
	  depends="run-junit,run-report" description="Run the test suite">
    <fail message="JUnit tests failed" if="junit.failed"/>
    <echo message="JUnit tests passed"/>
  </target>

  <target name="report" 
	  depends="run-junit,run-report" 
	  description="Run tests and generate reports">
    <fail message="JUnit tests failed" if="junit.failed"/>
    <echo message="JUnit tests passed"/>
  </target>

  <!-- Worker task for the above tasks -->

  <target name="pre-run-junit"/>

  <target name="run-junit"
	  depends="clean-once,jar,pre-run-junit,clean-reports">
    <mkdir dir="${reports.dir}"/>
    <mkdir dir="${reports.dir.xml}"/>

    <!-- Don't stop on failure - set a property instead -->
    <junit fork="yes" printsummary="yes" 
	   errorProperty="junit.failed" failureProperty="junit.failed">
      <!-- usefile="false"  type="plain"-->
      <!-- <formatter usefile="false" type="brief"/> -->
      <formatter type="xml" />
      <formatter type="plain" />
      <classpath>
        <pathelement path="${build.classes.dir}" />
        <pathelement path="${build.classes.test.dir}" />
        <path refid="java.run.class.path" />
      </classpath>
      <!-- <test name="test.TS_Main" outfile="${reports.dir.xml}/junit-report"/> -->
      <batchtest todir="${reports.dir.xml}">
        <fileset dir="${src.test.dir}">
          <include name="**/TS_*.java" />
        </fileset>
        <fileset dir="${src.lib.test.dir}">
          <include name="**/TS_*.java" />
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="run-report" >
    <junitreport todir="./${reports.dir}">
      <fileset dir="./${reports.dir.xml}">
        <include name="**.xml"/>
      </fileset>
      <report format="frames" todir="./${reports.outdir}"/>
    </junitreport>
  </target>

  <!-- ========================================== -->
  <!-- ==== Run -->

  <target name="run" depends="compile">
    <java classname="${main-class}" fork="true">
      <!-- jar="${build.jar.dir}/${jarfile}"-->
      <arg value="--check"/>
      <arg value="10"/>
      <arg value="100"/>
      <classpath>
        <pathelement path="${build.classes.dir}"/>
        <pathelement path="${build.classes.test.dir}"/>
        <path refid="java.run.class.path"/>
      </classpath>
    </java>
  </target>

  
  <!-- ========================================== -->
  <!-- ==== Misc -->

  <target name="clean" description="Clean (build and reports)"
          depends="clean-all">
  </target>

  <target name="clean-once" unless="clean.run">
    <antcall target="clean-all"/>
    <property name="clean.run" value="set"/>
  </target>

  <target name="clean-all" depends="clean-build-area,clean-reports">
  </target>

  <target name="clean-javadoc">
    <delete dir="${javadoc.dir}"/>
    <mkdir  dir="${javadoc.dir}"/>
    <delete dir="${javadoc.all.dir}"/>
    <mkdir  dir="${javadoc.all.dir}"/>
  </target>
  
  <target name="clean-build-area">
    <delete quiet="true" dir="${build.dir}"/>
    <mkdir  dir="${build.dir}"/>
  </target>

  <target name="clean-reports">
    <delete dir="${reports.dir}"/>
    <delete dir="${reports.dir.xml}"/>
    <delete dir="${reports.outdir}"/>
  </target>

  <target name="clean-artifacts">
    <delete dir="${artifacts.dir}"/>
    <mkdir dir="${artifacts.dir}"/>
  </target> 
  
</project>
